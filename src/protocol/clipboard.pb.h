// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clipboard.proto

#ifndef PROTOBUF_INCLUDED_clipboard_2eproto
#define PROTOBUF_INCLUDED_clipboard_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_clipboard_2eproto 

namespace protobuf_clipboard_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_clipboard_2eproto
class SyncClipboardRequest;
class SyncClipboardRequestDefaultTypeInternal;
extern SyncClipboardRequestDefaultTypeInternal _SyncClipboardRequest_default_instance_;
class SyncClipboardResponse;
class SyncClipboardResponseDefaultTypeInternal;
extern SyncClipboardResponseDefaultTypeInternal _SyncClipboardResponse_default_instance_;
namespace google {
namespace protobuf {
template<> ::SyncClipboardRequest* Arena::CreateMaybeMessage<::SyncClipboardRequest>(Arena*);
template<> ::SyncClipboardResponse* Arena::CreateMaybeMessage<::SyncClipboardResponse>(Arena*);
}  // namespace protobuf
}  // namespace google

enum ClipboardDataType {
  Text = 0,
  MIME = 1,
  Pixmap = 2,
  File = 3,
  ClipboardDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ClipboardDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ClipboardDataType_IsValid(int value);
const ClipboardDataType ClipboardDataType_MIN = Text;
const ClipboardDataType ClipboardDataType_MAX = File;
const int ClipboardDataType_ARRAYSIZE = ClipboardDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClipboardDataType_descriptor();
inline const ::std::string& ClipboardDataType_Name(ClipboardDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClipboardDataType_descriptor(), value);
}
inline bool ClipboardDataType_Parse(
    const ::std::string& name, ClipboardDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClipboardDataType>(
    ClipboardDataType_descriptor(), name, value);
}
// ===================================================================

class SyncClipboardRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SyncClipboardRequest) */ {
 public:
  SyncClipboardRequest();
  virtual ~SyncClipboardRequest();

  SyncClipboardRequest(const SyncClipboardRequest& from);

  inline SyncClipboardRequest& operator=(const SyncClipboardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncClipboardRequest(SyncClipboardRequest&& from) noexcept
    : SyncClipboardRequest() {
    *this = ::std::move(from);
  }

  inline SyncClipboardRequest& operator=(SyncClipboardRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncClipboardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncClipboardRequest* internal_default_instance() {
    return reinterpret_cast<const SyncClipboardRequest*>(
               &_SyncClipboardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SyncClipboardRequest* other);
  friend void swap(SyncClipboardRequest& a, SyncClipboardRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncClipboardRequest* New() const final {
    return CreateMaybeMessage<SyncClipboardRequest>(NULL);
  }

  SyncClipboardRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncClipboardRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncClipboardRequest& from);
  void MergeFrom(const SyncClipboardRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncClipboardRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 3;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int64 serial = 1;
  void clear_serial();
  static const int kSerialFieldNumber = 1;
  ::google::protobuf::int64 serial() const;
  void set_serial(::google::protobuf::int64 value);

  // .ClipboardDataType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::ClipboardDataType type() const;
  void set_type(::ClipboardDataType value);

  // @@protoc_insertion_point(class_scope:SyncClipboardRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int64 serial_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_clipboard_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SyncClipboardResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SyncClipboardResponse) */ {
 public:
  SyncClipboardResponse();
  virtual ~SyncClipboardResponse();

  SyncClipboardResponse(const SyncClipboardResponse& from);

  inline SyncClipboardResponse& operator=(const SyncClipboardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncClipboardResponse(SyncClipboardResponse&& from) noexcept
    : SyncClipboardResponse() {
    *this = ::std::move(from);
  }

  inline SyncClipboardResponse& operator=(SyncClipboardResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncClipboardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncClipboardResponse* internal_default_instance() {
    return reinterpret_cast<const SyncClipboardResponse*>(
               &_SyncClipboardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SyncClipboardResponse* other);
  friend void swap(SyncClipboardResponse& a, SyncClipboardResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncClipboardResponse* New() const final {
    return CreateMaybeMessage<SyncClipboardResponse>(NULL);
  }

  SyncClipboardResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncClipboardResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncClipboardResponse& from);
  void MergeFrom(const SyncClipboardResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncClipboardResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 serial = 1;
  void clear_serial();
  static const int kSerialFieldNumber = 1;
  ::google::protobuf::int64 serial() const;
  void set_serial(::google::protobuf::int64 value);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // @@protoc_insertion_point(class_scope:SyncClipboardResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 serial_;
  bool success_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_clipboard_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncClipboardRequest

// int64 serial = 1;
inline void SyncClipboardRequest::clear_serial() {
  serial_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SyncClipboardRequest::serial() const {
  // @@protoc_insertion_point(field_get:SyncClipboardRequest.serial)
  return serial_;
}
inline void SyncClipboardRequest::set_serial(::google::protobuf::int64 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:SyncClipboardRequest.serial)
}

// .ClipboardDataType type = 2;
inline void SyncClipboardRequest::clear_type() {
  type_ = 0;
}
inline ::ClipboardDataType SyncClipboardRequest::type() const {
  // @@protoc_insertion_point(field_get:SyncClipboardRequest.type)
  return static_cast< ::ClipboardDataType >(type_);
}
inline void SyncClipboardRequest::set_type(::ClipboardDataType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:SyncClipboardRequest.type)
}

// bytes data = 3;
inline void SyncClipboardRequest::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncClipboardRequest::data() const {
  // @@protoc_insertion_point(field_get:SyncClipboardRequest.data)
  return data_.GetNoArena();
}
inline void SyncClipboardRequest::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:SyncClipboardRequest.data)
}
#if LANG_CXX11
inline void SyncClipboardRequest::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SyncClipboardRequest.data)
}
#endif
inline void SyncClipboardRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SyncClipboardRequest.data)
}
inline void SyncClipboardRequest::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SyncClipboardRequest.data)
}
inline ::std::string* SyncClipboardRequest::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:SyncClipboardRequest.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncClipboardRequest::release_data() {
  // @@protoc_insertion_point(field_release:SyncClipboardRequest.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncClipboardRequest::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:SyncClipboardRequest.data)
}

// -------------------------------------------------------------------

// SyncClipboardResponse

// int64 serial = 1;
inline void SyncClipboardResponse::clear_serial() {
  serial_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SyncClipboardResponse::serial() const {
  // @@protoc_insertion_point(field_get:SyncClipboardResponse.serial)
  return serial_;
}
inline void SyncClipboardResponse::set_serial(::google::protobuf::int64 value) {
  
  serial_ = value;
  // @@protoc_insertion_point(field_set:SyncClipboardResponse.serial)
}

// bool success = 2;
inline void SyncClipboardResponse::clear_success() {
  success_ = false;
}
inline bool SyncClipboardResponse::success() const {
  // @@protoc_insertion_point(field_get:SyncClipboardResponse.success)
  return success_;
}
inline void SyncClipboardResponse::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:SyncClipboardResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ClipboardDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClipboardDataType>() {
  return ::ClipboardDataType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_clipboard_2eproto
