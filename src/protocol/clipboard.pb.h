// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clipboard.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_clipboard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_clipboard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_clipboard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_clipboard_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_clipboard_2eproto;
class SyncClipboardRequest;
class SyncClipboardRequestDefaultTypeInternal;
extern SyncClipboardRequestDefaultTypeInternal _SyncClipboardRequest_default_instance_;
class SyncClipboardResponse;
class SyncClipboardResponseDefaultTypeInternal;
extern SyncClipboardResponseDefaultTypeInternal _SyncClipboardResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::SyncClipboardRequest* Arena::CreateMaybeMessage<::SyncClipboardRequest>(Arena*);
template<> ::SyncClipboardResponse* Arena::CreateMaybeMessage<::SyncClipboardResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum ClipboardDataType : int {
  Text = 0,
  MIME = 1,
  Pixmap = 2,
  File = 3,
  ClipboardDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClipboardDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClipboardDataType_IsValid(int value);
constexpr ClipboardDataType ClipboardDataType_MIN = Text;
constexpr ClipboardDataType ClipboardDataType_MAX = File;
constexpr int ClipboardDataType_ARRAYSIZE = ClipboardDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClipboardDataType_descriptor();
template<typename T>
inline const std::string& ClipboardDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClipboardDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClipboardDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClipboardDataType_descriptor(), enum_t_value);
}
inline bool ClipboardDataType_Parse(
    const std::string& name, ClipboardDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClipboardDataType>(
    ClipboardDataType_descriptor(), name, value);
}
// ===================================================================

class SyncClipboardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncClipboardRequest) */ {
 public:
  inline SyncClipboardRequest() : SyncClipboardRequest(nullptr) {};
  virtual ~SyncClipboardRequest();

  SyncClipboardRequest(const SyncClipboardRequest& from);
  SyncClipboardRequest(SyncClipboardRequest&& from) noexcept
    : SyncClipboardRequest() {
    *this = ::std::move(from);
  }

  inline SyncClipboardRequest& operator=(const SyncClipboardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncClipboardRequest& operator=(SyncClipboardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncClipboardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncClipboardRequest* internal_default_instance() {
    return reinterpret_cast<const SyncClipboardRequest*>(
               &_SyncClipboardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SyncClipboardRequest& a, SyncClipboardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncClipboardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncClipboardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncClipboardRequest* New() const final {
    return CreateMaybeMessage<SyncClipboardRequest>(nullptr);
  }

  SyncClipboardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncClipboardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncClipboardRequest& from);
  void MergeFrom(const SyncClipboardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncClipboardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncClipboardRequest";
  }
  protected:
  explicit SyncClipboardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clipboard_2eproto);
    return ::descriptor_table_clipboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kSerialFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 serial = 1;
  void clear_serial();
  ::PROTOBUF_NAMESPACE_ID::int64 serial() const;
  void set_serial(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_serial() const;
  void _internal_set_serial(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .ClipboardDataType type = 2;
  void clear_type();
  ::ClipboardDataType type() const;
  void set_type(::ClipboardDataType value);
  private:
  ::ClipboardDataType _internal_type() const;
  void _internal_set_type(::ClipboardDataType value);
  public:

  // @@protoc_insertion_point(class_scope:SyncClipboardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int64 serial_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_clipboard_2eproto;
};
// -------------------------------------------------------------------

class SyncClipboardResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SyncClipboardResponse) */ {
 public:
  inline SyncClipboardResponse() : SyncClipboardResponse(nullptr) {};
  virtual ~SyncClipboardResponse();

  SyncClipboardResponse(const SyncClipboardResponse& from);
  SyncClipboardResponse(SyncClipboardResponse&& from) noexcept
    : SyncClipboardResponse() {
    *this = ::std::move(from);
  }

  inline SyncClipboardResponse& operator=(const SyncClipboardResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncClipboardResponse& operator=(SyncClipboardResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SyncClipboardResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncClipboardResponse* internal_default_instance() {
    return reinterpret_cast<const SyncClipboardResponse*>(
               &_SyncClipboardResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SyncClipboardResponse& a, SyncClipboardResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncClipboardResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncClipboardResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncClipboardResponse* New() const final {
    return CreateMaybeMessage<SyncClipboardResponse>(nullptr);
  }

  SyncClipboardResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncClipboardResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncClipboardResponse& from);
  void MergeFrom(const SyncClipboardResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncClipboardResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SyncClipboardResponse";
  }
  protected:
  explicit SyncClipboardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_clipboard_2eproto);
    return ::descriptor_table_clipboard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // int64 serial = 1;
  void clear_serial();
  ::PROTOBUF_NAMESPACE_ID::int64 serial() const;
  void set_serial(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_serial() const;
  void _internal_set_serial(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:SyncClipboardResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 serial_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_clipboard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SyncClipboardRequest

// int64 serial = 1;
inline void SyncClipboardRequest::clear_serial() {
  serial_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncClipboardRequest::_internal_serial() const {
  return serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncClipboardRequest::serial() const {
  // @@protoc_insertion_point(field_get:SyncClipboardRequest.serial)
  return _internal_serial();
}
inline void SyncClipboardRequest::_internal_set_serial(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  serial_ = value;
}
inline void SyncClipboardRequest::set_serial(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:SyncClipboardRequest.serial)
}

// .ClipboardDataType type = 2;
inline void SyncClipboardRequest::clear_type() {
  type_ = 0;
}
inline ::ClipboardDataType SyncClipboardRequest::_internal_type() const {
  return static_cast< ::ClipboardDataType >(type_);
}
inline ::ClipboardDataType SyncClipboardRequest::type() const {
  // @@protoc_insertion_point(field_get:SyncClipboardRequest.type)
  return _internal_type();
}
inline void SyncClipboardRequest::_internal_set_type(::ClipboardDataType value) {
  
  type_ = value;
}
inline void SyncClipboardRequest::set_type(::ClipboardDataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:SyncClipboardRequest.type)
}

// bytes data = 3;
inline void SyncClipboardRequest::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SyncClipboardRequest::data() const {
  // @@protoc_insertion_point(field_get:SyncClipboardRequest.data)
  return _internal_data();
}
inline void SyncClipboardRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:SyncClipboardRequest.data)
}
inline std::string* SyncClipboardRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:SyncClipboardRequest.data)
  return _internal_mutable_data();
}
inline const std::string& SyncClipboardRequest::_internal_data() const {
  return data_.Get();
}
inline void SyncClipboardRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SyncClipboardRequest::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:SyncClipboardRequest.data)
}
inline void SyncClipboardRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:SyncClipboardRequest.data)
}
inline void SyncClipboardRequest::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:SyncClipboardRequest.data)
}
inline std::string* SyncClipboardRequest::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SyncClipboardRequest::release_data() {
  // @@protoc_insertion_point(field_release:SyncClipboardRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SyncClipboardRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:SyncClipboardRequest.data)
}
inline std::string* SyncClipboardRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:SyncClipboardRequest.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SyncClipboardRequest::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:SyncClipboardRequest.data)
}

// -------------------------------------------------------------------

// SyncClipboardResponse

// int64 serial = 1;
inline void SyncClipboardResponse::clear_serial() {
  serial_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncClipboardResponse::_internal_serial() const {
  return serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncClipboardResponse::serial() const {
  // @@protoc_insertion_point(field_get:SyncClipboardResponse.serial)
  return _internal_serial();
}
inline void SyncClipboardResponse::_internal_set_serial(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  serial_ = value;
}
inline void SyncClipboardResponse::set_serial(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:SyncClipboardResponse.serial)
}

// bool success = 2;
inline void SyncClipboardResponse::clear_success() {
  success_ = false;
}
inline bool SyncClipboardResponse::_internal_success() const {
  return success_;
}
inline bool SyncClipboardResponse::success() const {
  // @@protoc_insertion_point(field_get:SyncClipboardResponse.success)
  return _internal_success();
}
inline void SyncClipboardResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SyncClipboardResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:SyncClipboardResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ClipboardDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClipboardDataType>() {
  return ::ClipboardDataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_clipboard_2eproto
