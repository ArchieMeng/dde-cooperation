// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote_display.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_remote_5fdisplay_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_remote_5fdisplay_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_remote_5fdisplay_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_remote_5fdisplay_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_remote_5fdisplay_2eproto;
class RemoteDisplayConfigRequest;
class RemoteDisplayConfigRequestDefaultTypeInternal;
extern RemoteDisplayConfigRequestDefaultTypeInternal _RemoteDisplayConfigRequest_default_instance_;
class RemoteDisplayConfigResponse;
class RemoteDisplayConfigResponseDefaultTypeInternal;
extern RemoteDisplayConfigResponseDefaultTypeInternal _RemoteDisplayConfigResponse_default_instance_;
class RemoteDisplaySendRequest;
class RemoteDisplaySendRequestDefaultTypeInternal;
extern RemoteDisplaySendRequestDefaultTypeInternal _RemoteDisplaySendRequest_default_instance_;
class RemoteDisplaySendResponse;
class RemoteDisplaySendResponseDefaultTypeInternal;
extern RemoteDisplaySendResponseDefaultTypeInternal _RemoteDisplaySendResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::RemoteDisplayConfigRequest* Arena::CreateMaybeMessage<::RemoteDisplayConfigRequest>(Arena*);
template<> ::RemoteDisplayConfigResponse* Arena::CreateMaybeMessage<::RemoteDisplayConfigResponse>(Arena*);
template<> ::RemoteDisplaySendRequest* Arena::CreateMaybeMessage<::RemoteDisplaySendRequest>(Arena*);
template<> ::RemoteDisplaySendResponse* Arena::CreateMaybeMessage<::RemoteDisplaySendResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum RemoteDisplayDataType : int {
  BMP = 0,
  MotionJPEG = 1,
  H264 = 2,
  RemoteDisplayDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RemoteDisplayDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RemoteDisplayDataType_IsValid(int value);
constexpr RemoteDisplayDataType RemoteDisplayDataType_MIN = BMP;
constexpr RemoteDisplayDataType RemoteDisplayDataType_MAX = H264;
constexpr int RemoteDisplayDataType_ARRAYSIZE = RemoteDisplayDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RemoteDisplayDataType_descriptor();
template<typename T>
inline const std::string& RemoteDisplayDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RemoteDisplayDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RemoteDisplayDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RemoteDisplayDataType_descriptor(), enum_t_value);
}
inline bool RemoteDisplayDataType_Parse(
    const std::string& name, RemoteDisplayDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RemoteDisplayDataType>(
    RemoteDisplayDataType_descriptor(), name, value);
}
// ===================================================================

class RemoteDisplayConfigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RemoteDisplayConfigRequest) */ {
 public:
  inline RemoteDisplayConfigRequest() : RemoteDisplayConfigRequest(nullptr) {};
  virtual ~RemoteDisplayConfigRequest();

  RemoteDisplayConfigRequest(const RemoteDisplayConfigRequest& from);
  RemoteDisplayConfigRequest(RemoteDisplayConfigRequest&& from) noexcept
    : RemoteDisplayConfigRequest() {
    *this = ::std::move(from);
  }

  inline RemoteDisplayConfigRequest& operator=(const RemoteDisplayConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteDisplayConfigRequest& operator=(RemoteDisplayConfigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoteDisplayConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteDisplayConfigRequest* internal_default_instance() {
    return reinterpret_cast<const RemoteDisplayConfigRequest*>(
               &_RemoteDisplayConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RemoteDisplayConfigRequest& a, RemoteDisplayConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteDisplayConfigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteDisplayConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteDisplayConfigRequest* New() const final {
    return CreateMaybeMessage<RemoteDisplayConfigRequest>(nullptr);
  }

  RemoteDisplayConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteDisplayConfigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoteDisplayConfigRequest& from);
  void MergeFrom(const RemoteDisplayConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteDisplayConfigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RemoteDisplayConfigRequest";
  }
  protected:
  explicit RemoteDisplayConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_5fdisplay_2eproto);
    return ::descriptor_table_remote_5fdisplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kDisplayFieldNumber = 4,
  };
  // .RemoteDisplayDataType type = 1;
  void clear_type();
  ::RemoteDisplayDataType type() const;
  void set_type(::RemoteDisplayDataType value);
  private:
  ::RemoteDisplayDataType _internal_type() const;
  void _internal_set_type(::RemoteDisplayDataType value);
  public:

  // int32 width = 2;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 3;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool display = 4;
  void clear_display();
  bool display() const;
  void set_display(bool value);
  private:
  bool _internal_display() const;
  void _internal_set_display(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RemoteDisplayConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  bool display_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_5fdisplay_2eproto;
};
// -------------------------------------------------------------------

class RemoteDisplayConfigResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RemoteDisplayConfigResponse) */ {
 public:
  inline RemoteDisplayConfigResponse() : RemoteDisplayConfigResponse(nullptr) {};
  virtual ~RemoteDisplayConfigResponse();

  RemoteDisplayConfigResponse(const RemoteDisplayConfigResponse& from);
  RemoteDisplayConfigResponse(RemoteDisplayConfigResponse&& from) noexcept
    : RemoteDisplayConfigResponse() {
    *this = ::std::move(from);
  }

  inline RemoteDisplayConfigResponse& operator=(const RemoteDisplayConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteDisplayConfigResponse& operator=(RemoteDisplayConfigResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoteDisplayConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteDisplayConfigResponse* internal_default_instance() {
    return reinterpret_cast<const RemoteDisplayConfigResponse*>(
               &_RemoteDisplayConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RemoteDisplayConfigResponse& a, RemoteDisplayConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteDisplayConfigResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteDisplayConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteDisplayConfigResponse* New() const final {
    return CreateMaybeMessage<RemoteDisplayConfigResponse>(nullptr);
  }

  RemoteDisplayConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteDisplayConfigResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoteDisplayConfigResponse& from);
  void MergeFrom(const RemoteDisplayConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteDisplayConfigResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RemoteDisplayConfigResponse";
  }
  protected:
  explicit RemoteDisplayConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_5fdisplay_2eproto);
    return ::descriptor_table_remote_5fdisplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RemoteDisplayConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_5fdisplay_2eproto;
};
// -------------------------------------------------------------------

class RemoteDisplaySendRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RemoteDisplaySendRequest) */ {
 public:
  inline RemoteDisplaySendRequest() : RemoteDisplaySendRequest(nullptr) {};
  virtual ~RemoteDisplaySendRequest();

  RemoteDisplaySendRequest(const RemoteDisplaySendRequest& from);
  RemoteDisplaySendRequest(RemoteDisplaySendRequest&& from) noexcept
    : RemoteDisplaySendRequest() {
    *this = ::std::move(from);
  }

  inline RemoteDisplaySendRequest& operator=(const RemoteDisplaySendRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteDisplaySendRequest& operator=(RemoteDisplaySendRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoteDisplaySendRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteDisplaySendRequest* internal_default_instance() {
    return reinterpret_cast<const RemoteDisplaySendRequest*>(
               &_RemoteDisplaySendRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RemoteDisplaySendRequest& a, RemoteDisplaySendRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteDisplaySendRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteDisplaySendRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteDisplaySendRequest* New() const final {
    return CreateMaybeMessage<RemoteDisplaySendRequest>(nullptr);
  }

  RemoteDisplaySendRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteDisplaySendRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoteDisplaySendRequest& from);
  void MergeFrom(const RemoteDisplaySendRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteDisplaySendRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RemoteDisplaySendRequest";
  }
  protected:
  explicit RemoteDisplaySendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_5fdisplay_2eproto);
    return ::descriptor_table_remote_5fdisplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kSerialFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int64 serial = 1;
  void clear_serial();
  ::PROTOBUF_NAMESPACE_ID::int64 serial() const;
  void set_serial(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_serial() const;
  void _internal_set_serial(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:RemoteDisplaySendRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int64 serial_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_5fdisplay_2eproto;
};
// -------------------------------------------------------------------

class RemoteDisplaySendResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RemoteDisplaySendResponse) */ {
 public:
  inline RemoteDisplaySendResponse() : RemoteDisplaySendResponse(nullptr) {};
  virtual ~RemoteDisplaySendResponse();

  RemoteDisplaySendResponse(const RemoteDisplaySendResponse& from);
  RemoteDisplaySendResponse(RemoteDisplaySendResponse&& from) noexcept
    : RemoteDisplaySendResponse() {
    *this = ::std::move(from);
  }

  inline RemoteDisplaySendResponse& operator=(const RemoteDisplaySendResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteDisplaySendResponse& operator=(RemoteDisplaySendResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RemoteDisplaySendResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoteDisplaySendResponse* internal_default_instance() {
    return reinterpret_cast<const RemoteDisplaySendResponse*>(
               &_RemoteDisplaySendResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RemoteDisplaySendResponse& a, RemoteDisplaySendResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteDisplaySendResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteDisplaySendResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RemoteDisplaySendResponse* New() const final {
    return CreateMaybeMessage<RemoteDisplaySendResponse>(nullptr);
  }

  RemoteDisplaySendResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RemoteDisplaySendResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RemoteDisplaySendResponse& from);
  void MergeFrom(const RemoteDisplaySendResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoteDisplaySendResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RemoteDisplaySendResponse";
  }
  protected:
  explicit RemoteDisplaySendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_remote_5fdisplay_2eproto);
    return ::descriptor_table_remote_5fdisplay_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSerialFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // int64 serial = 1;
  void clear_serial();
  ::PROTOBUF_NAMESPACE_ID::int64 serial() const;
  void set_serial(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_serial() const;
  void _internal_set_serial(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:RemoteDisplaySendResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 serial_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_remote_5fdisplay_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RemoteDisplayConfigRequest

// .RemoteDisplayDataType type = 1;
inline void RemoteDisplayConfigRequest::clear_type() {
  type_ = 0;
}
inline ::RemoteDisplayDataType RemoteDisplayConfigRequest::_internal_type() const {
  return static_cast< ::RemoteDisplayDataType >(type_);
}
inline ::RemoteDisplayDataType RemoteDisplayConfigRequest::type() const {
  // @@protoc_insertion_point(field_get:RemoteDisplayConfigRequest.type)
  return _internal_type();
}
inline void RemoteDisplayConfigRequest::_internal_set_type(::RemoteDisplayDataType value) {
  
  type_ = value;
}
inline void RemoteDisplayConfigRequest::set_type(::RemoteDisplayDataType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:RemoteDisplayConfigRequest.type)
}

// int32 width = 2;
inline void RemoteDisplayConfigRequest::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoteDisplayConfigRequest::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoteDisplayConfigRequest::width() const {
  // @@protoc_insertion_point(field_get:RemoteDisplayConfigRequest.width)
  return _internal_width();
}
inline void RemoteDisplayConfigRequest::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void RemoteDisplayConfigRequest::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:RemoteDisplayConfigRequest.width)
}

// int32 height = 3;
inline void RemoteDisplayConfigRequest::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoteDisplayConfigRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoteDisplayConfigRequest::height() const {
  // @@protoc_insertion_point(field_get:RemoteDisplayConfigRequest.height)
  return _internal_height();
}
inline void RemoteDisplayConfigRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void RemoteDisplayConfigRequest::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:RemoteDisplayConfigRequest.height)
}

// bool display = 4;
inline void RemoteDisplayConfigRequest::clear_display() {
  display_ = false;
}
inline bool RemoteDisplayConfigRequest::_internal_display() const {
  return display_;
}
inline bool RemoteDisplayConfigRequest::display() const {
  // @@protoc_insertion_point(field_get:RemoteDisplayConfigRequest.display)
  return _internal_display();
}
inline void RemoteDisplayConfigRequest::_internal_set_display(bool value) {
  
  display_ = value;
}
inline void RemoteDisplayConfigRequest::set_display(bool value) {
  _internal_set_display(value);
  // @@protoc_insertion_point(field_set:RemoteDisplayConfigRequest.display)
}

// -------------------------------------------------------------------

// RemoteDisplayConfigResponse

// bool success = 1;
inline void RemoteDisplayConfigResponse::clear_success() {
  success_ = false;
}
inline bool RemoteDisplayConfigResponse::_internal_success() const {
  return success_;
}
inline bool RemoteDisplayConfigResponse::success() const {
  // @@protoc_insertion_point(field_get:RemoteDisplayConfigResponse.success)
  return _internal_success();
}
inline void RemoteDisplayConfigResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void RemoteDisplayConfigResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:RemoteDisplayConfigResponse.success)
}

// int32 port = 2;
inline void RemoteDisplayConfigResponse::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoteDisplayConfigResponse::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RemoteDisplayConfigResponse::port() const {
  // @@protoc_insertion_point(field_get:RemoteDisplayConfigResponse.port)
  return _internal_port();
}
inline void RemoteDisplayConfigResponse::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void RemoteDisplayConfigResponse::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:RemoteDisplayConfigResponse.port)
}

// -------------------------------------------------------------------

// RemoteDisplaySendRequest

// int64 serial = 1;
inline void RemoteDisplaySendRequest::clear_serial() {
  serial_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RemoteDisplaySendRequest::_internal_serial() const {
  return serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RemoteDisplaySendRequest::serial() const {
  // @@protoc_insertion_point(field_get:RemoteDisplaySendRequest.serial)
  return _internal_serial();
}
inline void RemoteDisplaySendRequest::_internal_set_serial(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  serial_ = value;
}
inline void RemoteDisplaySendRequest::set_serial(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:RemoteDisplaySendRequest.serial)
}

// bytes data = 2;
inline void RemoteDisplaySendRequest::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RemoteDisplaySendRequest::data() const {
  // @@protoc_insertion_point(field_get:RemoteDisplaySendRequest.data)
  return _internal_data();
}
inline void RemoteDisplaySendRequest::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:RemoteDisplaySendRequest.data)
}
inline std::string* RemoteDisplaySendRequest::mutable_data() {
  // @@protoc_insertion_point(field_mutable:RemoteDisplaySendRequest.data)
  return _internal_mutable_data();
}
inline const std::string& RemoteDisplaySendRequest::_internal_data() const {
  return data_.Get();
}
inline void RemoteDisplaySendRequest::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RemoteDisplaySendRequest::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:RemoteDisplaySendRequest.data)
}
inline void RemoteDisplaySendRequest::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:RemoteDisplaySendRequest.data)
}
inline void RemoteDisplaySendRequest::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:RemoteDisplaySendRequest.data)
}
inline std::string* RemoteDisplaySendRequest::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RemoteDisplaySendRequest::release_data() {
  // @@protoc_insertion_point(field_release:RemoteDisplaySendRequest.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RemoteDisplaySendRequest::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:RemoteDisplaySendRequest.data)
}
inline std::string* RemoteDisplaySendRequest::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:RemoteDisplaySendRequest.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RemoteDisplaySendRequest::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:RemoteDisplaySendRequest.data)
}

// -------------------------------------------------------------------

// RemoteDisplaySendResponse

// int64 serial = 1;
inline void RemoteDisplaySendResponse::clear_serial() {
  serial_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RemoteDisplaySendResponse::_internal_serial() const {
  return serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RemoteDisplaySendResponse::serial() const {
  // @@protoc_insertion_point(field_get:RemoteDisplaySendResponse.serial)
  return _internal_serial();
}
inline void RemoteDisplaySendResponse::_internal_set_serial(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  serial_ = value;
}
inline void RemoteDisplaySendResponse::set_serial(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:RemoteDisplaySendResponse.serial)
}

// bool success = 2;
inline void RemoteDisplaySendResponse::clear_success() {
  success_ = false;
}
inline bool RemoteDisplaySendResponse::_internal_success() const {
  return success_;
}
inline bool RemoteDisplaySendResponse::success() const {
  // @@protoc_insertion_point(field_get:RemoteDisplaySendResponse.success)
  return _internal_success();
}
inline void RemoteDisplaySendResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void RemoteDisplaySendResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:RemoteDisplaySendResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RemoteDisplayDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RemoteDisplayDataType>() {
  return ::RemoteDisplayDataType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_remote_5fdisplay_2eproto
