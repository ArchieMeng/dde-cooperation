// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pair.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pair_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pair_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pair_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pair_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pair_2eproto;
class PairRequest;
class PairRequestDefaultTypeInternal;
extern PairRequestDefaultTypeInternal _PairRequest_default_instance_;
class PairResponse;
class PairResponseDefaultTypeInternal;
extern PairResponseDefaultTypeInternal _PairResponse_default_instance_;
class ScanRequest;
class ScanRequestDefaultTypeInternal;
extern ScanRequestDefaultTypeInternal _ScanRequest_default_instance_;
class ScanResponse;
class ScanResponseDefaultTypeInternal;
extern ScanResponseDefaultTypeInternal _ScanResponse_default_instance_;
class StopPairRequest;
class StopPairRequestDefaultTypeInternal;
extern StopPairRequestDefaultTypeInternal _StopPairRequest_default_instance_;
class StopPairResponse;
class StopPairResponseDefaultTypeInternal;
extern StopPairResponseDefaultTypeInternal _StopPairResponse_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::PairRequest* Arena::CreateMaybeMessage<::PairRequest>(Arena*);
template<> ::PairResponse* Arena::CreateMaybeMessage<::PairResponse>(Arena*);
template<> ::ScanRequest* Arena::CreateMaybeMessage<::ScanRequest>(Arena*);
template<> ::ScanResponse* Arena::CreateMaybeMessage<::ScanResponse>(Arena*);
template<> ::StopPairRequest* Arena::CreateMaybeMessage<::StopPairRequest>(Arena*);
template<> ::StopPairResponse* Arena::CreateMaybeMessage<::StopPairResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum DeviceOS : int {
  OTHER = 0,
  UOS = 1,
  LINUX = 2,
  WINDOWS = 3,
  MACOS = 4,
  ANDROID = 5,
  DeviceOS_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DeviceOS_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DeviceOS_IsValid(int value);
constexpr DeviceOS DeviceOS_MIN = OTHER;
constexpr DeviceOS DeviceOS_MAX = ANDROID;
constexpr int DeviceOS_ARRAYSIZE = DeviceOS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceOS_descriptor();
template<typename T>
inline const std::string& DeviceOS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceOS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceOS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceOS_descriptor(), enum_t_value);
}
inline bool DeviceOS_Parse(
    const std::string& name, DeviceOS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceOS>(
    DeviceOS_descriptor(), name, value);
}
// ===================================================================

class ScanRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ScanRequest) */ {
 public:
  inline ScanRequest() : ScanRequest(nullptr) {};
  virtual ~ScanRequest();

  ScanRequest(const ScanRequest& from);
  ScanRequest(ScanRequest&& from) noexcept
    : ScanRequest() {
    *this = ::std::move(from);
  }

  inline ScanRequest& operator=(const ScanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanRequest& operator=(ScanRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanRequest* internal_default_instance() {
    return reinterpret_cast<const ScanRequest*>(
               &_ScanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScanRequest& a, ScanRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanRequest* New() const final {
    return CreateMaybeMessage<ScanRequest>(nullptr);
  }

  ScanRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanRequest& from);
  void MergeFrom(const ScanRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ScanRequest";
  }
  protected:
  explicit ScanRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pair_2eproto);
    return ::descriptor_table_pair_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kMasterNameFieldNumber = 2,
    kOsFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string master_name = 2;
  void clear_master_name();
  const std::string& master_name() const;
  void set_master_name(const std::string& value);
  void set_master_name(std::string&& value);
  void set_master_name(const char* value);
  void set_master_name(const char* value, size_t size);
  std::string* mutable_master_name();
  std::string* release_master_name();
  void set_allocated_master_name(std::string* master_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_master_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_master_name(
      std::string* master_name);
  private:
  const std::string& _internal_master_name() const;
  void _internal_set_master_name(const std::string& value);
  std::string* _internal_mutable_master_name();
  public:

  // .DeviceOS os = 3;
  void clear_os();
  ::DeviceOS os() const;
  void set_os(::DeviceOS value);
  private:
  ::DeviceOS _internal_os() const;
  void _internal_set_os(::DeviceOS value);
  public:

  // @@protoc_insertion_point(class_scope:ScanRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr master_name_;
  int os_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pair_2eproto;
};
// -------------------------------------------------------------------

class ScanResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ScanResponse) */ {
 public:
  inline ScanResponse() : ScanResponse(nullptr) {};
  virtual ~ScanResponse();

  ScanResponse(const ScanResponse& from);
  ScanResponse(ScanResponse&& from) noexcept
    : ScanResponse() {
    *this = ::std::move(from);
  }

  inline ScanResponse& operator=(const ScanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScanResponse& operator=(ScanResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScanResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanResponse* internal_default_instance() {
    return reinterpret_cast<const ScanResponse*>(
               &_ScanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScanResponse& a, ScanResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ScanResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScanResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScanResponse* New() const final {
    return CreateMaybeMessage<ScanResponse>(nullptr);
  }

  ScanResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScanResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScanResponse& from);
  void MergeFrom(const ScanResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ScanResponse";
  }
  protected:
  explicit ScanResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pair_2eproto);
    return ::descriptor_table_pair_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kSlaveNameFieldNumber = 2,
    kOsFieldNumber = 3,
    kPortFieldNumber = 4,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string slave_name = 2;
  void clear_slave_name();
  const std::string& slave_name() const;
  void set_slave_name(const std::string& value);
  void set_slave_name(std::string&& value);
  void set_slave_name(const char* value);
  void set_slave_name(const char* value, size_t size);
  std::string* mutable_slave_name();
  std::string* release_slave_name();
  void set_allocated_slave_name(std::string* slave_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_slave_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_slave_name(
      std::string* slave_name);
  private:
  const std::string& _internal_slave_name() const;
  void _internal_set_slave_name(const std::string& value);
  std::string* _internal_mutable_slave_name();
  public:

  // .DeviceOS os = 3;
  void clear_os();
  ::DeviceOS os() const;
  void set_os(::DeviceOS value);
  private:
  ::DeviceOS _internal_os() const;
  void _internal_set_os(::DeviceOS value);
  public:

  // int32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ScanResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slave_name_;
  int os_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pair_2eproto;
};
// -------------------------------------------------------------------

class PairRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PairRequest) */ {
 public:
  inline PairRequest() : PairRequest(nullptr) {};
  virtual ~PairRequest();

  PairRequest(const PairRequest& from);
  PairRequest(PairRequest&& from) noexcept
    : PairRequest() {
    *this = ::std::move(from);
  }

  inline PairRequest& operator=(const PairRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PairRequest& operator=(PairRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PairRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PairRequest* internal_default_instance() {
    return reinterpret_cast<const PairRequest*>(
               &_PairRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PairRequest& a, PairRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PairRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PairRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PairRequest* New() const final {
    return CreateMaybeMessage<PairRequest>(nullptr);
  }

  PairRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PairRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PairRequest& from);
  void MergeFrom(const PairRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PairRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PairRequest";
  }
  protected:
  explicit PairRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pair_2eproto);
    return ::descriptor_table_pair_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kMasterNameFieldNumber = 2,
    kOsFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string master_name = 2;
  void clear_master_name();
  const std::string& master_name() const;
  void set_master_name(const std::string& value);
  void set_master_name(std::string&& value);
  void set_master_name(const char* value);
  void set_master_name(const char* value, size_t size);
  std::string* mutable_master_name();
  std::string* release_master_name();
  void set_allocated_master_name(std::string* master_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_master_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_master_name(
      std::string* master_name);
  private:
  const std::string& _internal_master_name() const;
  void _internal_set_master_name(const std::string& value);
  std::string* _internal_mutable_master_name();
  public:

  // .DeviceOS os = 3;
  void clear_os();
  ::DeviceOS os() const;
  void set_os(::DeviceOS value);
  private:
  ::DeviceOS _internal_os() const;
  void _internal_set_os(::DeviceOS value);
  public:

  // @@protoc_insertion_point(class_scope:PairRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr master_name_;
  int os_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pair_2eproto;
};
// -------------------------------------------------------------------

class PairResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PairResponse) */ {
 public:
  inline PairResponse() : PairResponse(nullptr) {};
  virtual ~PairResponse();

  PairResponse(const PairResponse& from);
  PairResponse(PairResponse&& from) noexcept
    : PairResponse() {
    *this = ::std::move(from);
  }

  inline PairResponse& operator=(const PairResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PairResponse& operator=(PairResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PairResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PairResponse* internal_default_instance() {
    return reinterpret_cast<const PairResponse*>(
               &_PairResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PairResponse& a, PairResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PairResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PairResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PairResponse* New() const final {
    return CreateMaybeMessage<PairResponse>(nullptr);
  }

  PairResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PairResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PairResponse& from);
  void MergeFrom(const PairResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PairResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PairResponse";
  }
  protected:
  explicit PairResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pair_2eproto);
    return ::descriptor_table_pair_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kSlaveNameFieldNumber = 2,
    kOsFieldNumber = 3,
    kAgreeFieldNumber = 4,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string slave_name = 2;
  void clear_slave_name();
  const std::string& slave_name() const;
  void set_slave_name(const std::string& value);
  void set_slave_name(std::string&& value);
  void set_slave_name(const char* value);
  void set_slave_name(const char* value, size_t size);
  std::string* mutable_slave_name();
  std::string* release_slave_name();
  void set_allocated_slave_name(std::string* slave_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_slave_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_slave_name(
      std::string* slave_name);
  private:
  const std::string& _internal_slave_name() const;
  void _internal_set_slave_name(const std::string& value);
  std::string* _internal_mutable_slave_name();
  public:

  // .DeviceOS os = 3;
  void clear_os();
  ::DeviceOS os() const;
  void set_os(::DeviceOS value);
  private:
  ::DeviceOS _internal_os() const;
  void _internal_set_os(::DeviceOS value);
  public:

  // bool agree = 4;
  void clear_agree();
  bool agree() const;
  void set_agree(bool value);
  private:
  bool _internal_agree() const;
  void _internal_set_agree(bool value);
  public:

  // @@protoc_insertion_point(class_scope:PairResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slave_name_;
  int os_;
  bool agree_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pair_2eproto;
};
// -------------------------------------------------------------------

class StopPairRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StopPairRequest) */ {
 public:
  inline StopPairRequest() : StopPairRequest(nullptr) {};
  virtual ~StopPairRequest();

  StopPairRequest(const StopPairRequest& from);
  StopPairRequest(StopPairRequest&& from) noexcept
    : StopPairRequest() {
    *this = ::std::move(from);
  }

  inline StopPairRequest& operator=(const StopPairRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopPairRequest& operator=(StopPairRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopPairRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopPairRequest* internal_default_instance() {
    return reinterpret_cast<const StopPairRequest*>(
               &_StopPairRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StopPairRequest& a, StopPairRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopPairRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopPairRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopPairRequest* New() const final {
    return CreateMaybeMessage<StopPairRequest>(nullptr);
  }

  StopPairRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopPairRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopPairRequest& from);
  void MergeFrom(const StopPairRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopPairRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StopPairRequest";
  }
  protected:
  explicit StopPairRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pair_2eproto);
    return ::descriptor_table_pair_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImmediatelyFieldNumber = 1,
  };
  // bool immediately = 1;
  void clear_immediately();
  bool immediately() const;
  void set_immediately(bool value);
  private:
  bool _internal_immediately() const;
  void _internal_set_immediately(bool value);
  public:

  // @@protoc_insertion_point(class_scope:StopPairRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool immediately_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pair_2eproto;
};
// -------------------------------------------------------------------

class StopPairResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:StopPairResponse) */ {
 public:
  inline StopPairResponse() : StopPairResponse(nullptr) {};
  virtual ~StopPairResponse();

  StopPairResponse(const StopPairResponse& from);
  StopPairResponse(StopPairResponse&& from) noexcept
    : StopPairResponse() {
    *this = ::std::move(from);
  }

  inline StopPairResponse& operator=(const StopPairResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopPairResponse& operator=(StopPairResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopPairResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopPairResponse* internal_default_instance() {
    return reinterpret_cast<const StopPairResponse*>(
               &_StopPairResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(StopPairResponse& a, StopPairResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopPairResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopPairResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopPairResponse* New() const final {
    return CreateMaybeMessage<StopPairResponse>(nullptr);
  }

  StopPairResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopPairResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopPairResponse& from);
  void MergeFrom(const StopPairResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopPairResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "StopPairResponse";
  }
  protected:
  explicit StopPairResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pair_2eproto);
    return ::descriptor_table_pair_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kByeFieldNumber = 1,
  };
  // string bye = 1;
  void clear_bye();
  const std::string& bye() const;
  void set_bye(const std::string& value);
  void set_bye(std::string&& value);
  void set_bye(const char* value);
  void set_bye(const char* value, size_t size);
  std::string* mutable_bye();
  std::string* release_bye();
  void set_allocated_bye(std::string* bye);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_bye();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_bye(
      std::string* bye);
  private:
  const std::string& _internal_bye() const;
  void _internal_set_bye(const std::string& value);
  std::string* _internal_mutable_bye();
  public:

  // @@protoc_insertion_point(class_scope:StopPairResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bye_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pair_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScanRequest

// string key = 1;
inline void ScanRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ScanRequest::key() const {
  // @@protoc_insertion_point(field_get:ScanRequest.key)
  return _internal_key();
}
inline void ScanRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ScanRequest.key)
}
inline std::string* ScanRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:ScanRequest.key)
  return _internal_mutable_key();
}
inline const std::string& ScanRequest::_internal_key() const {
  return key_.Get();
}
inline void ScanRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ScanRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ScanRequest.key)
}
inline void ScanRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ScanRequest.key)
}
inline void ScanRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ScanRequest.key)
}
inline std::string* ScanRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ScanRequest::release_key() {
  // @@protoc_insertion_point(field_release:ScanRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScanRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ScanRequest.key)
}
inline std::string* ScanRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ScanRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ScanRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ScanRequest.key)
}

// string master_name = 2;
inline void ScanRequest::clear_master_name() {
  master_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ScanRequest::master_name() const {
  // @@protoc_insertion_point(field_get:ScanRequest.master_name)
  return _internal_master_name();
}
inline void ScanRequest::set_master_name(const std::string& value) {
  _internal_set_master_name(value);
  // @@protoc_insertion_point(field_set:ScanRequest.master_name)
}
inline std::string* ScanRequest::mutable_master_name() {
  // @@protoc_insertion_point(field_mutable:ScanRequest.master_name)
  return _internal_mutable_master_name();
}
inline const std::string& ScanRequest::_internal_master_name() const {
  return master_name_.Get();
}
inline void ScanRequest::_internal_set_master_name(const std::string& value) {
  
  master_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ScanRequest::set_master_name(std::string&& value) {
  
  master_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ScanRequest.master_name)
}
inline void ScanRequest::set_master_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  master_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ScanRequest.master_name)
}
inline void ScanRequest::set_master_name(const char* value,
    size_t size) {
  
  master_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ScanRequest.master_name)
}
inline std::string* ScanRequest::_internal_mutable_master_name() {
  
  return master_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ScanRequest::release_master_name() {
  // @@protoc_insertion_point(field_release:ScanRequest.master_name)
  return master_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScanRequest::set_allocated_master_name(std::string* master_name) {
  if (master_name != nullptr) {
    
  } else {
    
  }
  master_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), master_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ScanRequest.master_name)
}
inline std::string* ScanRequest::unsafe_arena_release_master_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ScanRequest.master_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return master_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ScanRequest::unsafe_arena_set_allocated_master_name(
    std::string* master_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (master_name != nullptr) {
    
  } else {
    
  }
  master_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      master_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ScanRequest.master_name)
}

// .DeviceOS os = 3;
inline void ScanRequest::clear_os() {
  os_ = 0;
}
inline ::DeviceOS ScanRequest::_internal_os() const {
  return static_cast< ::DeviceOS >(os_);
}
inline ::DeviceOS ScanRequest::os() const {
  // @@protoc_insertion_point(field_get:ScanRequest.os)
  return _internal_os();
}
inline void ScanRequest::_internal_set_os(::DeviceOS value) {
  
  os_ = value;
}
inline void ScanRequest::set_os(::DeviceOS value) {
  _internal_set_os(value);
  // @@protoc_insertion_point(field_set:ScanRequest.os)
}

// -------------------------------------------------------------------

// ScanResponse

// string key = 1;
inline void ScanResponse::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ScanResponse::key() const {
  // @@protoc_insertion_point(field_get:ScanResponse.key)
  return _internal_key();
}
inline void ScanResponse::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:ScanResponse.key)
}
inline std::string* ScanResponse::mutable_key() {
  // @@protoc_insertion_point(field_mutable:ScanResponse.key)
  return _internal_mutable_key();
}
inline const std::string& ScanResponse::_internal_key() const {
  return key_.Get();
}
inline void ScanResponse::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ScanResponse::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ScanResponse.key)
}
inline void ScanResponse::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ScanResponse.key)
}
inline void ScanResponse::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ScanResponse.key)
}
inline std::string* ScanResponse::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ScanResponse::release_key() {
  // @@protoc_insertion_point(field_release:ScanResponse.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScanResponse::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ScanResponse.key)
}
inline std::string* ScanResponse::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ScanResponse.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ScanResponse::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ScanResponse.key)
}

// string slave_name = 2;
inline void ScanResponse::clear_slave_name() {
  slave_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ScanResponse::slave_name() const {
  // @@protoc_insertion_point(field_get:ScanResponse.slave_name)
  return _internal_slave_name();
}
inline void ScanResponse::set_slave_name(const std::string& value) {
  _internal_set_slave_name(value);
  // @@protoc_insertion_point(field_set:ScanResponse.slave_name)
}
inline std::string* ScanResponse::mutable_slave_name() {
  // @@protoc_insertion_point(field_mutable:ScanResponse.slave_name)
  return _internal_mutable_slave_name();
}
inline const std::string& ScanResponse::_internal_slave_name() const {
  return slave_name_.Get();
}
inline void ScanResponse::_internal_set_slave_name(const std::string& value) {
  
  slave_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ScanResponse::set_slave_name(std::string&& value) {
  
  slave_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:ScanResponse.slave_name)
}
inline void ScanResponse::set_slave_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  slave_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:ScanResponse.slave_name)
}
inline void ScanResponse::set_slave_name(const char* value,
    size_t size) {
  
  slave_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:ScanResponse.slave_name)
}
inline std::string* ScanResponse::_internal_mutable_slave_name() {
  
  return slave_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ScanResponse::release_slave_name() {
  // @@protoc_insertion_point(field_release:ScanResponse.slave_name)
  return slave_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ScanResponse::set_allocated_slave_name(std::string* slave_name) {
  if (slave_name != nullptr) {
    
  } else {
    
  }
  slave_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slave_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:ScanResponse.slave_name)
}
inline std::string* ScanResponse::unsafe_arena_release_slave_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ScanResponse.slave_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return slave_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ScanResponse::unsafe_arena_set_allocated_slave_name(
    std::string* slave_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (slave_name != nullptr) {
    
  } else {
    
  }
  slave_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      slave_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ScanResponse.slave_name)
}

// .DeviceOS os = 3;
inline void ScanResponse::clear_os() {
  os_ = 0;
}
inline ::DeviceOS ScanResponse::_internal_os() const {
  return static_cast< ::DeviceOS >(os_);
}
inline ::DeviceOS ScanResponse::os() const {
  // @@protoc_insertion_point(field_get:ScanResponse.os)
  return _internal_os();
}
inline void ScanResponse::_internal_set_os(::DeviceOS value) {
  
  os_ = value;
}
inline void ScanResponse::set_os(::DeviceOS value) {
  _internal_set_os(value);
  // @@protoc_insertion_point(field_set:ScanResponse.os)
}

// int32 port = 4;
inline void ScanResponse::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScanResponse::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScanResponse::port() const {
  // @@protoc_insertion_point(field_get:ScanResponse.port)
  return _internal_port();
}
inline void ScanResponse::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void ScanResponse::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:ScanResponse.port)
}

// -------------------------------------------------------------------

// PairRequest

// string key = 1;
inline void PairRequest::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PairRequest::key() const {
  // @@protoc_insertion_point(field_get:PairRequest.key)
  return _internal_key();
}
inline void PairRequest::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:PairRequest.key)
}
inline std::string* PairRequest::mutable_key() {
  // @@protoc_insertion_point(field_mutable:PairRequest.key)
  return _internal_mutable_key();
}
inline const std::string& PairRequest::_internal_key() const {
  return key_.Get();
}
inline void PairRequest::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PairRequest::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PairRequest.key)
}
inline void PairRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PairRequest.key)
}
inline void PairRequest::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PairRequest.key)
}
inline std::string* PairRequest::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PairRequest::release_key() {
  // @@protoc_insertion_point(field_release:PairRequest.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PairRequest::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PairRequest.key)
}
inline std::string* PairRequest::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PairRequest.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PairRequest::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PairRequest.key)
}

// string master_name = 2;
inline void PairRequest::clear_master_name() {
  master_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PairRequest::master_name() const {
  // @@protoc_insertion_point(field_get:PairRequest.master_name)
  return _internal_master_name();
}
inline void PairRequest::set_master_name(const std::string& value) {
  _internal_set_master_name(value);
  // @@protoc_insertion_point(field_set:PairRequest.master_name)
}
inline std::string* PairRequest::mutable_master_name() {
  // @@protoc_insertion_point(field_mutable:PairRequest.master_name)
  return _internal_mutable_master_name();
}
inline const std::string& PairRequest::_internal_master_name() const {
  return master_name_.Get();
}
inline void PairRequest::_internal_set_master_name(const std::string& value) {
  
  master_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PairRequest::set_master_name(std::string&& value) {
  
  master_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PairRequest.master_name)
}
inline void PairRequest::set_master_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  master_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PairRequest.master_name)
}
inline void PairRequest::set_master_name(const char* value,
    size_t size) {
  
  master_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PairRequest.master_name)
}
inline std::string* PairRequest::_internal_mutable_master_name() {
  
  return master_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PairRequest::release_master_name() {
  // @@protoc_insertion_point(field_release:PairRequest.master_name)
  return master_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PairRequest::set_allocated_master_name(std::string* master_name) {
  if (master_name != nullptr) {
    
  } else {
    
  }
  master_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), master_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PairRequest.master_name)
}
inline std::string* PairRequest::unsafe_arena_release_master_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PairRequest.master_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return master_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PairRequest::unsafe_arena_set_allocated_master_name(
    std::string* master_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (master_name != nullptr) {
    
  } else {
    
  }
  master_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      master_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PairRequest.master_name)
}

// .DeviceOS os = 3;
inline void PairRequest::clear_os() {
  os_ = 0;
}
inline ::DeviceOS PairRequest::_internal_os() const {
  return static_cast< ::DeviceOS >(os_);
}
inline ::DeviceOS PairRequest::os() const {
  // @@protoc_insertion_point(field_get:PairRequest.os)
  return _internal_os();
}
inline void PairRequest::_internal_set_os(::DeviceOS value) {
  
  os_ = value;
}
inline void PairRequest::set_os(::DeviceOS value) {
  _internal_set_os(value);
  // @@protoc_insertion_point(field_set:PairRequest.os)
}

// -------------------------------------------------------------------

// PairResponse

// string key = 1;
inline void PairResponse::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PairResponse::key() const {
  // @@protoc_insertion_point(field_get:PairResponse.key)
  return _internal_key();
}
inline void PairResponse::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:PairResponse.key)
}
inline std::string* PairResponse::mutable_key() {
  // @@protoc_insertion_point(field_mutable:PairResponse.key)
  return _internal_mutable_key();
}
inline const std::string& PairResponse::_internal_key() const {
  return key_.Get();
}
inline void PairResponse::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PairResponse::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PairResponse.key)
}
inline void PairResponse::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PairResponse.key)
}
inline void PairResponse::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PairResponse.key)
}
inline std::string* PairResponse::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PairResponse::release_key() {
  // @@protoc_insertion_point(field_release:PairResponse.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PairResponse::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PairResponse.key)
}
inline std::string* PairResponse::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PairResponse.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PairResponse::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PairResponse.key)
}

// string slave_name = 2;
inline void PairResponse::clear_slave_name() {
  slave_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PairResponse::slave_name() const {
  // @@protoc_insertion_point(field_get:PairResponse.slave_name)
  return _internal_slave_name();
}
inline void PairResponse::set_slave_name(const std::string& value) {
  _internal_set_slave_name(value);
  // @@protoc_insertion_point(field_set:PairResponse.slave_name)
}
inline std::string* PairResponse::mutable_slave_name() {
  // @@protoc_insertion_point(field_mutable:PairResponse.slave_name)
  return _internal_mutable_slave_name();
}
inline const std::string& PairResponse::_internal_slave_name() const {
  return slave_name_.Get();
}
inline void PairResponse::_internal_set_slave_name(const std::string& value) {
  
  slave_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PairResponse::set_slave_name(std::string&& value) {
  
  slave_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:PairResponse.slave_name)
}
inline void PairResponse::set_slave_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  slave_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:PairResponse.slave_name)
}
inline void PairResponse::set_slave_name(const char* value,
    size_t size) {
  
  slave_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:PairResponse.slave_name)
}
inline std::string* PairResponse::_internal_mutable_slave_name() {
  
  return slave_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PairResponse::release_slave_name() {
  // @@protoc_insertion_point(field_release:PairResponse.slave_name)
  return slave_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PairResponse::set_allocated_slave_name(std::string* slave_name) {
  if (slave_name != nullptr) {
    
  } else {
    
  }
  slave_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slave_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:PairResponse.slave_name)
}
inline std::string* PairResponse::unsafe_arena_release_slave_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PairResponse.slave_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return slave_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PairResponse::unsafe_arena_set_allocated_slave_name(
    std::string* slave_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (slave_name != nullptr) {
    
  } else {
    
  }
  slave_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      slave_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PairResponse.slave_name)
}

// .DeviceOS os = 3;
inline void PairResponse::clear_os() {
  os_ = 0;
}
inline ::DeviceOS PairResponse::_internal_os() const {
  return static_cast< ::DeviceOS >(os_);
}
inline ::DeviceOS PairResponse::os() const {
  // @@protoc_insertion_point(field_get:PairResponse.os)
  return _internal_os();
}
inline void PairResponse::_internal_set_os(::DeviceOS value) {
  
  os_ = value;
}
inline void PairResponse::set_os(::DeviceOS value) {
  _internal_set_os(value);
  // @@protoc_insertion_point(field_set:PairResponse.os)
}

// bool agree = 4;
inline void PairResponse::clear_agree() {
  agree_ = false;
}
inline bool PairResponse::_internal_agree() const {
  return agree_;
}
inline bool PairResponse::agree() const {
  // @@protoc_insertion_point(field_get:PairResponse.agree)
  return _internal_agree();
}
inline void PairResponse::_internal_set_agree(bool value) {
  
  agree_ = value;
}
inline void PairResponse::set_agree(bool value) {
  _internal_set_agree(value);
  // @@protoc_insertion_point(field_set:PairResponse.agree)
}

// -------------------------------------------------------------------

// StopPairRequest

// bool immediately = 1;
inline void StopPairRequest::clear_immediately() {
  immediately_ = false;
}
inline bool StopPairRequest::_internal_immediately() const {
  return immediately_;
}
inline bool StopPairRequest::immediately() const {
  // @@protoc_insertion_point(field_get:StopPairRequest.immediately)
  return _internal_immediately();
}
inline void StopPairRequest::_internal_set_immediately(bool value) {
  
  immediately_ = value;
}
inline void StopPairRequest::set_immediately(bool value) {
  _internal_set_immediately(value);
  // @@protoc_insertion_point(field_set:StopPairRequest.immediately)
}

// -------------------------------------------------------------------

// StopPairResponse

// string bye = 1;
inline void StopPairResponse::clear_bye() {
  bye_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopPairResponse::bye() const {
  // @@protoc_insertion_point(field_get:StopPairResponse.bye)
  return _internal_bye();
}
inline void StopPairResponse::set_bye(const std::string& value) {
  _internal_set_bye(value);
  // @@protoc_insertion_point(field_set:StopPairResponse.bye)
}
inline std::string* StopPairResponse::mutable_bye() {
  // @@protoc_insertion_point(field_mutable:StopPairResponse.bye)
  return _internal_mutable_bye();
}
inline const std::string& StopPairResponse::_internal_bye() const {
  return bye_.Get();
}
inline void StopPairResponse::_internal_set_bye(const std::string& value) {
  
  bye_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopPairResponse::set_bye(std::string&& value) {
  
  bye_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:StopPairResponse.bye)
}
inline void StopPairResponse::set_bye(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  bye_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:StopPairResponse.bye)
}
inline void StopPairResponse::set_bye(const char* value,
    size_t size) {
  
  bye_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:StopPairResponse.bye)
}
inline std::string* StopPairResponse::_internal_mutable_bye() {
  
  return bye_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopPairResponse::release_bye() {
  // @@protoc_insertion_point(field_release:StopPairResponse.bye)
  return bye_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopPairResponse::set_allocated_bye(std::string* bye) {
  if (bye != nullptr) {
    
  } else {
    
  }
  bye_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bye,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:StopPairResponse.bye)
}
inline std::string* StopPairResponse::unsafe_arena_release_bye() {
  // @@protoc_insertion_point(field_unsafe_arena_release:StopPairResponse.bye)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return bye_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopPairResponse::unsafe_arena_set_allocated_bye(
    std::string* bye) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (bye != nullptr) {
    
  } else {
    
  }
  bye_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      bye, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:StopPairResponse.bye)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DeviceOS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeviceOS>() {
  return ::DeviceOS_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pair_2eproto
