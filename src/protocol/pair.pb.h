// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pair.proto

#ifndef PROTOBUF_INCLUDED_pair_2eproto
#define PROTOBUF_INCLUDED_pair_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_pair_2eproto 

namespace protobuf_pair_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_pair_2eproto
class PairRequest;
class PairRequestDefaultTypeInternal;
extern PairRequestDefaultTypeInternal _PairRequest_default_instance_;
class PairResponse;
class PairResponseDefaultTypeInternal;
extern PairResponseDefaultTypeInternal _PairResponse_default_instance_;
class ScanRequest;
class ScanRequestDefaultTypeInternal;
extern ScanRequestDefaultTypeInternal _ScanRequest_default_instance_;
class ScanResponse;
class ScanResponseDefaultTypeInternal;
extern ScanResponseDefaultTypeInternal _ScanResponse_default_instance_;
class StopPairRequest;
class StopPairRequestDefaultTypeInternal;
extern StopPairRequestDefaultTypeInternal _StopPairRequest_default_instance_;
class StopPairResponse;
class StopPairResponseDefaultTypeInternal;
extern StopPairResponseDefaultTypeInternal _StopPairResponse_default_instance_;
namespace google {
namespace protobuf {
template<> ::PairRequest* Arena::CreateMaybeMessage<::PairRequest>(Arena*);
template<> ::PairResponse* Arena::CreateMaybeMessage<::PairResponse>(Arena*);
template<> ::ScanRequest* Arena::CreateMaybeMessage<::ScanRequest>(Arena*);
template<> ::ScanResponse* Arena::CreateMaybeMessage<::ScanResponse>(Arena*);
template<> ::StopPairRequest* Arena::CreateMaybeMessage<::StopPairRequest>(Arena*);
template<> ::StopPairResponse* Arena::CreateMaybeMessage<::StopPairResponse>(Arena*);
}  // namespace protobuf
}  // namespace google

enum DeviceOS {
  OTHER = 0,
  UOS = 1,
  LINUX = 2,
  WINDOWS = 3,
  MACOS = 4,
  ANDROID = 5,
  DeviceOS_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DeviceOS_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DeviceOS_IsValid(int value);
const DeviceOS DeviceOS_MIN = OTHER;
const DeviceOS DeviceOS_MAX = ANDROID;
const int DeviceOS_ARRAYSIZE = DeviceOS_MAX + 1;

const ::google::protobuf::EnumDescriptor* DeviceOS_descriptor();
inline const ::std::string& DeviceOS_Name(DeviceOS value) {
  return ::google::protobuf::internal::NameOfEnum(
    DeviceOS_descriptor(), value);
}
inline bool DeviceOS_Parse(
    const ::std::string& name, DeviceOS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DeviceOS>(
    DeviceOS_descriptor(), name, value);
}
// ===================================================================

class ScanRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ScanRequest) */ {
 public:
  ScanRequest();
  virtual ~ScanRequest();

  ScanRequest(const ScanRequest& from);

  inline ScanRequest& operator=(const ScanRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScanRequest(ScanRequest&& from) noexcept
    : ScanRequest() {
    *this = ::std::move(from);
  }

  inline ScanRequest& operator=(ScanRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanRequest* internal_default_instance() {
    return reinterpret_cast<const ScanRequest*>(
               &_ScanRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ScanRequest* other);
  friend void swap(ScanRequest& a, ScanRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScanRequest* New() const final {
    return CreateMaybeMessage<ScanRequest>(NULL);
  }

  ScanRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScanRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScanRequest& from);
  void MergeFrom(const ScanRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string master_name = 2;
  void clear_master_name();
  static const int kMasterNameFieldNumber = 2;
  const ::std::string& master_name() const;
  void set_master_name(const ::std::string& value);
  #if LANG_CXX11
  void set_master_name(::std::string&& value);
  #endif
  void set_master_name(const char* value);
  void set_master_name(const char* value, size_t size);
  ::std::string* mutable_master_name();
  ::std::string* release_master_name();
  void set_allocated_master_name(::std::string* master_name);

  // .DeviceOS os = 3;
  void clear_os();
  static const int kOsFieldNumber = 3;
  ::DeviceOS os() const;
  void set_os(::DeviceOS value);

  // @@protoc_insertion_point(class_scope:ScanRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr master_name_;
  int os_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pair_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScanResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ScanResponse) */ {
 public:
  ScanResponse();
  virtual ~ScanResponse();

  ScanResponse(const ScanResponse& from);

  inline ScanResponse& operator=(const ScanResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScanResponse(ScanResponse&& from) noexcept
    : ScanResponse() {
    *this = ::std::move(from);
  }

  inline ScanResponse& operator=(ScanResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScanResponse* internal_default_instance() {
    return reinterpret_cast<const ScanResponse*>(
               &_ScanResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ScanResponse* other);
  friend void swap(ScanResponse& a, ScanResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScanResponse* New() const final {
    return CreateMaybeMessage<ScanResponse>(NULL);
  }

  ScanResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScanResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScanResponse& from);
  void MergeFrom(const ScanResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScanResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string slave_name = 2;
  void clear_slave_name();
  static const int kSlaveNameFieldNumber = 2;
  const ::std::string& slave_name() const;
  void set_slave_name(const ::std::string& value);
  #if LANG_CXX11
  void set_slave_name(::std::string&& value);
  #endif
  void set_slave_name(const char* value);
  void set_slave_name(const char* value, size_t size);
  ::std::string* mutable_slave_name();
  ::std::string* release_slave_name();
  void set_allocated_slave_name(::std::string* slave_name);

  // .DeviceOS os = 3;
  void clear_os();
  static const int kOsFieldNumber = 3;
  ::DeviceOS os() const;
  void set_os(::DeviceOS value);

  // int32 port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ScanResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr slave_name_;
  int os_;
  ::google::protobuf::int32 port_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pair_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PairRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PairRequest) */ {
 public:
  PairRequest();
  virtual ~PairRequest();

  PairRequest(const PairRequest& from);

  inline PairRequest& operator=(const PairRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PairRequest(PairRequest&& from) noexcept
    : PairRequest() {
    *this = ::std::move(from);
  }

  inline PairRequest& operator=(PairRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PairRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PairRequest* internal_default_instance() {
    return reinterpret_cast<const PairRequest*>(
               &_PairRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PairRequest* other);
  friend void swap(PairRequest& a, PairRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PairRequest* New() const final {
    return CreateMaybeMessage<PairRequest>(NULL);
  }

  PairRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PairRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PairRequest& from);
  void MergeFrom(const PairRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PairRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string master_name = 2;
  void clear_master_name();
  static const int kMasterNameFieldNumber = 2;
  const ::std::string& master_name() const;
  void set_master_name(const ::std::string& value);
  #if LANG_CXX11
  void set_master_name(::std::string&& value);
  #endif
  void set_master_name(const char* value);
  void set_master_name(const char* value, size_t size);
  ::std::string* mutable_master_name();
  ::std::string* release_master_name();
  void set_allocated_master_name(::std::string* master_name);

  // .DeviceOS os = 3;
  void clear_os();
  static const int kOsFieldNumber = 3;
  ::DeviceOS os() const;
  void set_os(::DeviceOS value);

  // @@protoc_insertion_point(class_scope:PairRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr master_name_;
  int os_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pair_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PairResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PairResponse) */ {
 public:
  PairResponse();
  virtual ~PairResponse();

  PairResponse(const PairResponse& from);

  inline PairResponse& operator=(const PairResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PairResponse(PairResponse&& from) noexcept
    : PairResponse() {
    *this = ::std::move(from);
  }

  inline PairResponse& operator=(PairResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PairResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PairResponse* internal_default_instance() {
    return reinterpret_cast<const PairResponse*>(
               &_PairResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PairResponse* other);
  friend void swap(PairResponse& a, PairResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PairResponse* New() const final {
    return CreateMaybeMessage<PairResponse>(NULL);
  }

  PairResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PairResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PairResponse& from);
  void MergeFrom(const PairResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PairResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string slave_name = 2;
  void clear_slave_name();
  static const int kSlaveNameFieldNumber = 2;
  const ::std::string& slave_name() const;
  void set_slave_name(const ::std::string& value);
  #if LANG_CXX11
  void set_slave_name(::std::string&& value);
  #endif
  void set_slave_name(const char* value);
  void set_slave_name(const char* value, size_t size);
  ::std::string* mutable_slave_name();
  ::std::string* release_slave_name();
  void set_allocated_slave_name(::std::string* slave_name);

  // .DeviceOS os = 3;
  void clear_os();
  static const int kOsFieldNumber = 3;
  ::DeviceOS os() const;
  void set_os(::DeviceOS value);

  // bool agree = 4;
  void clear_agree();
  static const int kAgreeFieldNumber = 4;
  bool agree() const;
  void set_agree(bool value);

  // @@protoc_insertion_point(class_scope:PairResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr slave_name_;
  int os_;
  bool agree_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pair_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StopPairRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StopPairRequest) */ {
 public:
  StopPairRequest();
  virtual ~StopPairRequest();

  StopPairRequest(const StopPairRequest& from);

  inline StopPairRequest& operator=(const StopPairRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopPairRequest(StopPairRequest&& from) noexcept
    : StopPairRequest() {
    *this = ::std::move(from);
  }

  inline StopPairRequest& operator=(StopPairRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StopPairRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopPairRequest* internal_default_instance() {
    return reinterpret_cast<const StopPairRequest*>(
               &_StopPairRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(StopPairRequest* other);
  friend void swap(StopPairRequest& a, StopPairRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopPairRequest* New() const final {
    return CreateMaybeMessage<StopPairRequest>(NULL);
  }

  StopPairRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopPairRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopPairRequest& from);
  void MergeFrom(const StopPairRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopPairRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool immediately = 1;
  void clear_immediately();
  static const int kImmediatelyFieldNumber = 1;
  bool immediately() const;
  void set_immediately(bool value);

  // @@protoc_insertion_point(class_scope:StopPairRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool immediately_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pair_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StopPairResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:StopPairResponse) */ {
 public:
  StopPairResponse();
  virtual ~StopPairResponse();

  StopPairResponse(const StopPairResponse& from);

  inline StopPairResponse& operator=(const StopPairResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopPairResponse(StopPairResponse&& from) noexcept
    : StopPairResponse() {
    *this = ::std::move(from);
  }

  inline StopPairResponse& operator=(StopPairResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StopPairResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopPairResponse* internal_default_instance() {
    return reinterpret_cast<const StopPairResponse*>(
               &_StopPairResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(StopPairResponse* other);
  friend void swap(StopPairResponse& a, StopPairResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopPairResponse* New() const final {
    return CreateMaybeMessage<StopPairResponse>(NULL);
  }

  StopPairResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopPairResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopPairResponse& from);
  void MergeFrom(const StopPairResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopPairResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string bye = 1;
  void clear_bye();
  static const int kByeFieldNumber = 1;
  const ::std::string& bye() const;
  void set_bye(const ::std::string& value);
  #if LANG_CXX11
  void set_bye(::std::string&& value);
  #endif
  void set_bye(const char* value);
  void set_bye(const char* value, size_t size);
  ::std::string* mutable_bye();
  ::std::string* release_bye();
  void set_allocated_bye(::std::string* bye);

  // @@protoc_insertion_point(class_scope:StopPairResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr bye_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_pair_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScanRequest

// string key = 1;
inline void ScanRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanRequest::key() const {
  // @@protoc_insertion_point(field_get:ScanRequest.key)
  return key_.GetNoArena();
}
inline void ScanRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ScanRequest.key)
}
#if LANG_CXX11
inline void ScanRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ScanRequest.key)
}
#endif
inline void ScanRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ScanRequest.key)
}
inline void ScanRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ScanRequest.key)
}
inline ::std::string* ScanRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:ScanRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanRequest::release_key() {
  // @@protoc_insertion_point(field_release:ScanRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ScanRequest.key)
}

// string master_name = 2;
inline void ScanRequest::clear_master_name() {
  master_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanRequest::master_name() const {
  // @@protoc_insertion_point(field_get:ScanRequest.master_name)
  return master_name_.GetNoArena();
}
inline void ScanRequest::set_master_name(const ::std::string& value) {
  
  master_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ScanRequest.master_name)
}
#if LANG_CXX11
inline void ScanRequest::set_master_name(::std::string&& value) {
  
  master_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ScanRequest.master_name)
}
#endif
inline void ScanRequest::set_master_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  master_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ScanRequest.master_name)
}
inline void ScanRequest::set_master_name(const char* value, size_t size) {
  
  master_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ScanRequest.master_name)
}
inline ::std::string* ScanRequest::mutable_master_name() {
  
  // @@protoc_insertion_point(field_mutable:ScanRequest.master_name)
  return master_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanRequest::release_master_name() {
  // @@protoc_insertion_point(field_release:ScanRequest.master_name)
  
  return master_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanRequest::set_allocated_master_name(::std::string* master_name) {
  if (master_name != NULL) {
    
  } else {
    
  }
  master_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), master_name);
  // @@protoc_insertion_point(field_set_allocated:ScanRequest.master_name)
}

// .DeviceOS os = 3;
inline void ScanRequest::clear_os() {
  os_ = 0;
}
inline ::DeviceOS ScanRequest::os() const {
  // @@protoc_insertion_point(field_get:ScanRequest.os)
  return static_cast< ::DeviceOS >(os_);
}
inline void ScanRequest::set_os(::DeviceOS value) {
  
  os_ = value;
  // @@protoc_insertion_point(field_set:ScanRequest.os)
}

// -------------------------------------------------------------------

// ScanResponse

// string key = 1;
inline void ScanResponse::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanResponse::key() const {
  // @@protoc_insertion_point(field_get:ScanResponse.key)
  return key_.GetNoArena();
}
inline void ScanResponse::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ScanResponse.key)
}
#if LANG_CXX11
inline void ScanResponse::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ScanResponse.key)
}
#endif
inline void ScanResponse::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ScanResponse.key)
}
inline void ScanResponse::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ScanResponse.key)
}
inline ::std::string* ScanResponse::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:ScanResponse.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanResponse::release_key() {
  // @@protoc_insertion_point(field_release:ScanResponse.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanResponse::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:ScanResponse.key)
}

// string slave_name = 2;
inline void ScanResponse::clear_slave_name() {
  slave_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanResponse::slave_name() const {
  // @@protoc_insertion_point(field_get:ScanResponse.slave_name)
  return slave_name_.GetNoArena();
}
inline void ScanResponse::set_slave_name(const ::std::string& value) {
  
  slave_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ScanResponse.slave_name)
}
#if LANG_CXX11
inline void ScanResponse::set_slave_name(::std::string&& value) {
  
  slave_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ScanResponse.slave_name)
}
#endif
inline void ScanResponse::set_slave_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slave_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ScanResponse.slave_name)
}
inline void ScanResponse::set_slave_name(const char* value, size_t size) {
  
  slave_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ScanResponse.slave_name)
}
inline ::std::string* ScanResponse::mutable_slave_name() {
  
  // @@protoc_insertion_point(field_mutable:ScanResponse.slave_name)
  return slave_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanResponse::release_slave_name() {
  // @@protoc_insertion_point(field_release:ScanResponse.slave_name)
  
  return slave_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanResponse::set_allocated_slave_name(::std::string* slave_name) {
  if (slave_name != NULL) {
    
  } else {
    
  }
  slave_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slave_name);
  // @@protoc_insertion_point(field_set_allocated:ScanResponse.slave_name)
}

// .DeviceOS os = 3;
inline void ScanResponse::clear_os() {
  os_ = 0;
}
inline ::DeviceOS ScanResponse::os() const {
  // @@protoc_insertion_point(field_get:ScanResponse.os)
  return static_cast< ::DeviceOS >(os_);
}
inline void ScanResponse::set_os(::DeviceOS value) {
  
  os_ = value;
  // @@protoc_insertion_point(field_set:ScanResponse.os)
}

// int32 port = 4;
inline void ScanResponse::clear_port() {
  port_ = 0;
}
inline ::google::protobuf::int32 ScanResponse::port() const {
  // @@protoc_insertion_point(field_get:ScanResponse.port)
  return port_;
}
inline void ScanResponse::set_port(::google::protobuf::int32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:ScanResponse.port)
}

// -------------------------------------------------------------------

// PairRequest

// string key = 1;
inline void PairRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PairRequest::key() const {
  // @@protoc_insertion_point(field_get:PairRequest.key)
  return key_.GetNoArena();
}
inline void PairRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PairRequest.key)
}
#if LANG_CXX11
inline void PairRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PairRequest.key)
}
#endif
inline void PairRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PairRequest.key)
}
inline void PairRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PairRequest.key)
}
inline ::std::string* PairRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:PairRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PairRequest::release_key() {
  // @@protoc_insertion_point(field_release:PairRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PairRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:PairRequest.key)
}

// string master_name = 2;
inline void PairRequest::clear_master_name() {
  master_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PairRequest::master_name() const {
  // @@protoc_insertion_point(field_get:PairRequest.master_name)
  return master_name_.GetNoArena();
}
inline void PairRequest::set_master_name(const ::std::string& value) {
  
  master_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PairRequest.master_name)
}
#if LANG_CXX11
inline void PairRequest::set_master_name(::std::string&& value) {
  
  master_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PairRequest.master_name)
}
#endif
inline void PairRequest::set_master_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  master_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PairRequest.master_name)
}
inline void PairRequest::set_master_name(const char* value, size_t size) {
  
  master_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PairRequest.master_name)
}
inline ::std::string* PairRequest::mutable_master_name() {
  
  // @@protoc_insertion_point(field_mutable:PairRequest.master_name)
  return master_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PairRequest::release_master_name() {
  // @@protoc_insertion_point(field_release:PairRequest.master_name)
  
  return master_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PairRequest::set_allocated_master_name(::std::string* master_name) {
  if (master_name != NULL) {
    
  } else {
    
  }
  master_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), master_name);
  // @@protoc_insertion_point(field_set_allocated:PairRequest.master_name)
}

// .DeviceOS os = 3;
inline void PairRequest::clear_os() {
  os_ = 0;
}
inline ::DeviceOS PairRequest::os() const {
  // @@protoc_insertion_point(field_get:PairRequest.os)
  return static_cast< ::DeviceOS >(os_);
}
inline void PairRequest::set_os(::DeviceOS value) {
  
  os_ = value;
  // @@protoc_insertion_point(field_set:PairRequest.os)
}

// -------------------------------------------------------------------

// PairResponse

// string key = 1;
inline void PairResponse::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PairResponse::key() const {
  // @@protoc_insertion_point(field_get:PairResponse.key)
  return key_.GetNoArena();
}
inline void PairResponse::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PairResponse.key)
}
#if LANG_CXX11
inline void PairResponse::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PairResponse.key)
}
#endif
inline void PairResponse::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PairResponse.key)
}
inline void PairResponse::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PairResponse.key)
}
inline ::std::string* PairResponse::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:PairResponse.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PairResponse::release_key() {
  // @@protoc_insertion_point(field_release:PairResponse.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PairResponse::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:PairResponse.key)
}

// string slave_name = 2;
inline void PairResponse::clear_slave_name() {
  slave_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PairResponse::slave_name() const {
  // @@protoc_insertion_point(field_get:PairResponse.slave_name)
  return slave_name_.GetNoArena();
}
inline void PairResponse::set_slave_name(const ::std::string& value) {
  
  slave_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:PairResponse.slave_name)
}
#if LANG_CXX11
inline void PairResponse::set_slave_name(::std::string&& value) {
  
  slave_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:PairResponse.slave_name)
}
#endif
inline void PairResponse::set_slave_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slave_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:PairResponse.slave_name)
}
inline void PairResponse::set_slave_name(const char* value, size_t size) {
  
  slave_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:PairResponse.slave_name)
}
inline ::std::string* PairResponse::mutable_slave_name() {
  
  // @@protoc_insertion_point(field_mutable:PairResponse.slave_name)
  return slave_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PairResponse::release_slave_name() {
  // @@protoc_insertion_point(field_release:PairResponse.slave_name)
  
  return slave_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PairResponse::set_allocated_slave_name(::std::string* slave_name) {
  if (slave_name != NULL) {
    
  } else {
    
  }
  slave_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slave_name);
  // @@protoc_insertion_point(field_set_allocated:PairResponse.slave_name)
}

// .DeviceOS os = 3;
inline void PairResponse::clear_os() {
  os_ = 0;
}
inline ::DeviceOS PairResponse::os() const {
  // @@protoc_insertion_point(field_get:PairResponse.os)
  return static_cast< ::DeviceOS >(os_);
}
inline void PairResponse::set_os(::DeviceOS value) {
  
  os_ = value;
  // @@protoc_insertion_point(field_set:PairResponse.os)
}

// bool agree = 4;
inline void PairResponse::clear_agree() {
  agree_ = false;
}
inline bool PairResponse::agree() const {
  // @@protoc_insertion_point(field_get:PairResponse.agree)
  return agree_;
}
inline void PairResponse::set_agree(bool value) {
  
  agree_ = value;
  // @@protoc_insertion_point(field_set:PairResponse.agree)
}

// -------------------------------------------------------------------

// StopPairRequest

// bool immediately = 1;
inline void StopPairRequest::clear_immediately() {
  immediately_ = false;
}
inline bool StopPairRequest::immediately() const {
  // @@protoc_insertion_point(field_get:StopPairRequest.immediately)
  return immediately_;
}
inline void StopPairRequest::set_immediately(bool value) {
  
  immediately_ = value;
  // @@protoc_insertion_point(field_set:StopPairRequest.immediately)
}

// -------------------------------------------------------------------

// StopPairResponse

// string bye = 1;
inline void StopPairResponse::clear_bye() {
  bye_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StopPairResponse::bye() const {
  // @@protoc_insertion_point(field_get:StopPairResponse.bye)
  return bye_.GetNoArena();
}
inline void StopPairResponse::set_bye(const ::std::string& value) {
  
  bye_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StopPairResponse.bye)
}
#if LANG_CXX11
inline void StopPairResponse::set_bye(::std::string&& value) {
  
  bye_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:StopPairResponse.bye)
}
#endif
inline void StopPairResponse::set_bye(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bye_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StopPairResponse.bye)
}
inline void StopPairResponse::set_bye(const char* value, size_t size) {
  
  bye_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StopPairResponse.bye)
}
inline ::std::string* StopPairResponse::mutable_bye() {
  
  // @@protoc_insertion_point(field_mutable:StopPairResponse.bye)
  return bye_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopPairResponse::release_bye() {
  // @@protoc_insertion_point(field_release:StopPairResponse.bye)
  
  return bye_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopPairResponse::set_allocated_bye(::std::string* bye) {
  if (bye != NULL) {
    
  } else {
    
  }
  bye_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bye);
  // @@protoc_insertion_point(field_set_allocated:StopPairResponse.bye)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::DeviceOS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeviceOS>() {
  return ::DeviceOS_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_pair_2eproto
