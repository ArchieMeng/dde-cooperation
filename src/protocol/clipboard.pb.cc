// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clipboard.proto

#include "clipboard.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

class SyncClipboardRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SyncClipboardRequest>
      _instance;
} _SyncClipboardRequest_default_instance_;
class SyncClipboardResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SyncClipboardResponse>
      _instance;
} _SyncClipboardResponse_default_instance_;
namespace protobuf_clipboard_2eproto {
static void InitDefaultsSyncClipboardRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SyncClipboardRequest_default_instance_;
    new (ptr) ::SyncClipboardRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SyncClipboardRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SyncClipboardRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSyncClipboardRequest}, {}};

static void InitDefaultsSyncClipboardResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SyncClipboardResponse_default_instance_;
    new (ptr) ::SyncClipboardResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SyncClipboardResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SyncClipboardResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSyncClipboardResponse}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_SyncClipboardRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SyncClipboardResponse.base);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SyncClipboardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SyncClipboardRequest, serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SyncClipboardRequest, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SyncClipboardRequest, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SyncClipboardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SyncClipboardResponse, serial_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SyncClipboardResponse, success_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SyncClipboardRequest)},
  { 8, -1, sizeof(::SyncClipboardResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SyncClipboardRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SyncClipboardResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "clipboard.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017clipboard.proto\"V\n\024SyncClipboardReques"
      "t\022\016\n\006serial\030\001 \001(\003\022 \n\004type\030\002 \001(\0162\022.Clipbo"
      "ardDataType\022\014\n\004data\030\003 \001(\014\"8\n\025SyncClipboa"
      "rdResponse\022\016\n\006serial\030\001 \001(\003\022\017\n\007success\030\002 "
      "\001(\010*=\n\021ClipboardDataType\022\010\n\004Text\020\000\022\010\n\004MI"
      "ME\020\001\022\n\n\006Pixmap\020\002\022\010\n\004File\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 234);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "clipboard.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_clipboard_2eproto
const ::google::protobuf::EnumDescriptor* ClipboardDataType_descriptor() {
  protobuf_clipboard_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_clipboard_2eproto::file_level_enum_descriptors[0];
}
bool ClipboardDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SyncClipboardRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncClipboardRequest::kSerialFieldNumber;
const int SyncClipboardRequest::kTypeFieldNumber;
const int SyncClipboardRequest::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncClipboardRequest::SyncClipboardRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_clipboard_2eproto::scc_info_SyncClipboardRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncClipboardRequest)
}
SyncClipboardRequest::SyncClipboardRequest(const SyncClipboardRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&serial_, &from.serial_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&serial_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:SyncClipboardRequest)
}

void SyncClipboardRequest::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(type_));
}

SyncClipboardRequest::~SyncClipboardRequest() {
  // @@protoc_insertion_point(destructor:SyncClipboardRequest)
  SharedDtor();
}

void SyncClipboardRequest::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SyncClipboardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SyncClipboardRequest::descriptor() {
  ::protobuf_clipboard_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clipboard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SyncClipboardRequest& SyncClipboardRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_clipboard_2eproto::scc_info_SyncClipboardRequest.base);
  return *internal_default_instance();
}


void SyncClipboardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncClipboardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool SyncClipboardRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SyncClipboardRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 serial = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ClipboardDataType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ClipboardDataType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SyncClipboardRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SyncClipboardRequest)
  return false;
#undef DO_
}

void SyncClipboardRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SyncClipboardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 serial = 1;
  if (this->serial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->serial(), output);
  }

  // .ClipboardDataType type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SyncClipboardRequest)
}

::google::protobuf::uint8* SyncClipboardRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SyncClipboardRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 serial = 1;
  if (this->serial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->serial(), target);
  }

  // .ClipboardDataType type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncClipboardRequest)
  return target;
}

size_t SyncClipboardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncClipboardRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int64 serial = 1;
  if (this->serial() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->serial());
  }

  // .ClipboardDataType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncClipboardRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncClipboardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncClipboardRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncClipboardRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncClipboardRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncClipboardRequest)
    MergeFrom(*source);
  }
}

void SyncClipboardRequest::MergeFrom(const SyncClipboardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncClipboardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.serial() != 0) {
    set_serial(from.serial());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SyncClipboardRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncClipboardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncClipboardRequest::CopyFrom(const SyncClipboardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncClipboardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncClipboardRequest::IsInitialized() const {
  return true;
}

void SyncClipboardRequest::Swap(SyncClipboardRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncClipboardRequest::InternalSwap(SyncClipboardRequest* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(serial_, other->serial_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SyncClipboardRequest::GetMetadata() const {
  protobuf_clipboard_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clipboard_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SyncClipboardResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SyncClipboardResponse::kSerialFieldNumber;
const int SyncClipboardResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SyncClipboardResponse::SyncClipboardResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_clipboard_2eproto::scc_info_SyncClipboardResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SyncClipboardResponse)
}
SyncClipboardResponse::SyncClipboardResponse(const SyncClipboardResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&serial_, &from.serial_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&serial_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:SyncClipboardResponse)
}

void SyncClipboardResponse::SharedCtor() {
  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(success_));
}

SyncClipboardResponse::~SyncClipboardResponse() {
  // @@protoc_insertion_point(destructor:SyncClipboardResponse)
  SharedDtor();
}

void SyncClipboardResponse::SharedDtor() {
}

void SyncClipboardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SyncClipboardResponse::descriptor() {
  ::protobuf_clipboard_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clipboard_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SyncClipboardResponse& SyncClipboardResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_clipboard_2eproto::scc_info_SyncClipboardResponse.base);
  return *internal_default_instance();
}


void SyncClipboardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncClipboardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(success_));
  _internal_metadata_.Clear();
}

bool SyncClipboardResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SyncClipboardResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 serial = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &serial_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SyncClipboardResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SyncClipboardResponse)
  return false;
#undef DO_
}

void SyncClipboardResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SyncClipboardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 serial = 1;
  if (this->serial() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->serial(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SyncClipboardResponse)
}

::google::protobuf::uint8* SyncClipboardResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SyncClipboardResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 serial = 1;
  if (this->serial() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->serial(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncClipboardResponse)
  return target;
}

size_t SyncClipboardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncClipboardResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int64 serial = 1;
  if (this->serial() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->serial());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncClipboardResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncClipboardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncClipboardResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SyncClipboardResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncClipboardResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncClipboardResponse)
    MergeFrom(*source);
  }
}

void SyncClipboardResponse::MergeFrom(const SyncClipboardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncClipboardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serial() != 0) {
    set_serial(from.serial());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
}

void SyncClipboardResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncClipboardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncClipboardResponse::CopyFrom(const SyncClipboardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncClipboardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncClipboardResponse::IsInitialized() const {
  return true;
}

void SyncClipboardResponse::Swap(SyncClipboardResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SyncClipboardResponse::InternalSwap(SyncClipboardResponse* other) {
  using std::swap;
  swap(serial_, other->serial_);
  swap(success_, other->success_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SyncClipboardResponse::GetMetadata() const {
  protobuf_clipboard_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_clipboard_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SyncClipboardRequest* Arena::CreateMaybeMessage< ::SyncClipboardRequest >(Arena* arena) {
  return Arena::CreateInternal< ::SyncClipboardRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SyncClipboardResponse* Arena::CreateMaybeMessage< ::SyncClipboardResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SyncClipboardResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
