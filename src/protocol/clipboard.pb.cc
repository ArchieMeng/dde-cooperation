// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clipboard.proto

#include "clipboard.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class SyncClipboardRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncClipboardRequest> _instance;
} _SyncClipboardRequest_default_instance_;
class SyncClipboardResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SyncClipboardResponse> _instance;
} _SyncClipboardResponse_default_instance_;
static void InitDefaultsscc_info_SyncClipboardRequest_clipboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SyncClipboardRequest_default_instance_;
    new (ptr) ::SyncClipboardRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SyncClipboardRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncClipboardRequest_clipboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SyncClipboardRequest_clipboard_2eproto}, {}};

static void InitDefaultsscc_info_SyncClipboardResponse_clipboard_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SyncClipboardResponse_default_instance_;
    new (ptr) ::SyncClipboardResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SyncClipboardResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SyncClipboardResponse_clipboard_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SyncClipboardResponse_clipboard_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_clipboard_2eproto[2];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_clipboard_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_clipboard_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_clipboard_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncClipboardRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncClipboardRequest, serial_),
  PROTOBUF_FIELD_OFFSET(::SyncClipboardRequest, type_),
  PROTOBUF_FIELD_OFFSET(::SyncClipboardRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SyncClipboardResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SyncClipboardResponse, serial_),
  PROTOBUF_FIELD_OFFSET(::SyncClipboardResponse, success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SyncClipboardRequest)},
  { 8, -1, sizeof(::SyncClipboardResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SyncClipboardRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SyncClipboardResponse_default_instance_),
};

const char descriptor_table_protodef_clipboard_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017clipboard.proto\"V\n\024SyncClipboardReques"
  "t\022\016\n\006serial\030\001 \001(\003\022 \n\004type\030\002 \001(\0162\022.Clipbo"
  "ardDataType\022\014\n\004data\030\003 \001(\014\"8\n\025SyncClipboa"
  "rdResponse\022\016\n\006serial\030\001 \001(\003\022\017\n\007success\030\002 "
  "\001(\010*=\n\021ClipboardDataType\022\010\n\004Text\020\000\022\010\n\004MI"
  "ME\020\001\022\n\n\006Pixmap\020\002\022\010\n\004File\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_clipboard_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_clipboard_2eproto_sccs[2] = {
  &scc_info_SyncClipboardRequest_clipboard_2eproto.base,
  &scc_info_SyncClipboardResponse_clipboard_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_clipboard_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_clipboard_2eproto = {
  false, false, descriptor_table_protodef_clipboard_2eproto, "clipboard.proto", 234,
  &descriptor_table_clipboard_2eproto_once, descriptor_table_clipboard_2eproto_sccs, descriptor_table_clipboard_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_clipboard_2eproto::offsets,
  file_level_metadata_clipboard_2eproto, 2, file_level_enum_descriptors_clipboard_2eproto, file_level_service_descriptors_clipboard_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_clipboard_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_clipboard_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClipboardDataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_clipboard_2eproto);
  return file_level_enum_descriptors_clipboard_2eproto[0];
}
bool ClipboardDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void SyncClipboardRequest::InitAsDefaultInstance() {
}
class SyncClipboardRequest::_Internal {
 public:
};

SyncClipboardRequest::SyncClipboardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SyncClipboardRequest)
}
SyncClipboardRequest::SyncClipboardRequest(const SyncClipboardRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  ::memcpy(&serial_, &from.serial_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&serial_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:SyncClipboardRequest)
}

void SyncClipboardRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SyncClipboardRequest_clipboard_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(type_));
}

SyncClipboardRequest::~SyncClipboardRequest() {
  // @@protoc_insertion_point(destructor:SyncClipboardRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncClipboardRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SyncClipboardRequest::ArenaDtor(void* object) {
  SyncClipboardRequest* _this = reinterpret_cast< SyncClipboardRequest* >(object);
  (void)_this;
}
void SyncClipboardRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncClipboardRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncClipboardRequest& SyncClipboardRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncClipboardRequest_clipboard_2eproto.base);
  return *internal_default_instance();
}


void SyncClipboardRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncClipboardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncClipboardRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ClipboardDataType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::ClipboardDataType>(val));
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncClipboardRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncClipboardRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 serial = 1;
  if (this->serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_serial(), target);
  }

  // .ClipboardDataType type = 2;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncClipboardRequest)
  return target;
}

size_t SyncClipboardRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncClipboardRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 serial = 1;
  if (this->serial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_serial());
  }

  // .ClipboardDataType type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncClipboardRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncClipboardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncClipboardRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncClipboardRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncClipboardRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncClipboardRequest)
    MergeFrom(*source);
  }
}

void SyncClipboardRequest::MergeFrom(const SyncClipboardRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncClipboardRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.serial() != 0) {
    _internal_set_serial(from._internal_serial());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void SyncClipboardRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncClipboardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncClipboardRequest::CopyFrom(const SyncClipboardRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncClipboardRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncClipboardRequest::IsInitialized() const {
  return true;
}

void SyncClipboardRequest::InternalSwap(SyncClipboardRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncClipboardRequest, type_)
      + sizeof(SyncClipboardRequest::type_)
      - PROTOBUF_FIELD_OFFSET(SyncClipboardRequest, serial_)>(
          reinterpret_cast<char*>(&serial_),
          reinterpret_cast<char*>(&other->serial_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncClipboardRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SyncClipboardResponse::InitAsDefaultInstance() {
}
class SyncClipboardResponse::_Internal {
 public:
};

SyncClipboardResponse::SyncClipboardResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SyncClipboardResponse)
}
SyncClipboardResponse::SyncClipboardResponse(const SyncClipboardResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&serial_, &from.serial_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&serial_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:SyncClipboardResponse)
}

void SyncClipboardResponse::SharedCtor() {
  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(success_));
}

SyncClipboardResponse::~SyncClipboardResponse() {
  // @@protoc_insertion_point(destructor:SyncClipboardResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SyncClipboardResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SyncClipboardResponse::ArenaDtor(void* object) {
  SyncClipboardResponse* _this = reinterpret_cast< SyncClipboardResponse* >(object);
  (void)_this;
}
void SyncClipboardResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SyncClipboardResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SyncClipboardResponse& SyncClipboardResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SyncClipboardResponse_clipboard_2eproto.base);
  return *internal_default_instance();
}


void SyncClipboardResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SyncClipboardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncClipboardResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SyncClipboardResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SyncClipboardResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 serial = 1;
  if (this->serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_serial(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SyncClipboardResponse)
  return target;
}

size_t SyncClipboardResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SyncClipboardResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 serial = 1;
  if (this->serial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_serial());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SyncClipboardResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SyncClipboardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SyncClipboardResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SyncClipboardResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SyncClipboardResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SyncClipboardResponse)
    MergeFrom(*source);
  }
}

void SyncClipboardResponse::MergeFrom(const SyncClipboardResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SyncClipboardResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serial() != 0) {
    _internal_set_serial(from._internal_serial());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void SyncClipboardResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SyncClipboardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncClipboardResponse::CopyFrom(const SyncClipboardResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SyncClipboardResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncClipboardResponse::IsInitialized() const {
  return true;
}

void SyncClipboardResponse::InternalSwap(SyncClipboardResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncClipboardResponse, success_)
      + sizeof(SyncClipboardResponse::success_)
      - PROTOBUF_FIELD_OFFSET(SyncClipboardResponse, serial_)>(
          reinterpret_cast<char*>(&serial_),
          reinterpret_cast<char*>(&other->serial_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncClipboardResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SyncClipboardRequest* Arena::CreateMaybeMessage< ::SyncClipboardRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncClipboardRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SyncClipboardResponse* Arena::CreateMaybeMessage< ::SyncClipboardResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SyncClipboardResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
