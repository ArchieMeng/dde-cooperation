// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote_display.proto

#include "remote_display.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class RemoteDisplayConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteDisplayConfigRequest> _instance;
} _RemoteDisplayConfigRequest_default_instance_;
class RemoteDisplayConfigResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteDisplayConfigResponse> _instance;
} _RemoteDisplayConfigResponse_default_instance_;
class RemoteDisplaySendRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteDisplaySendRequest> _instance;
} _RemoteDisplaySendRequest_default_instance_;
class RemoteDisplaySendResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RemoteDisplaySendResponse> _instance;
} _RemoteDisplaySendResponse_default_instance_;
static void InitDefaultsscc_info_RemoteDisplayConfigRequest_remote_5fdisplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RemoteDisplayConfigRequest_default_instance_;
    new (ptr) ::RemoteDisplayConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RemoteDisplayConfigRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteDisplayConfigRequest_remote_5fdisplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteDisplayConfigRequest_remote_5fdisplay_2eproto}, {}};

static void InitDefaultsscc_info_RemoteDisplayConfigResponse_remote_5fdisplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RemoteDisplayConfigResponse_default_instance_;
    new (ptr) ::RemoteDisplayConfigResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RemoteDisplayConfigResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteDisplayConfigResponse_remote_5fdisplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteDisplayConfigResponse_remote_5fdisplay_2eproto}, {}};

static void InitDefaultsscc_info_RemoteDisplaySendRequest_remote_5fdisplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RemoteDisplaySendRequest_default_instance_;
    new (ptr) ::RemoteDisplaySendRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RemoteDisplaySendRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteDisplaySendRequest_remote_5fdisplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteDisplaySendRequest_remote_5fdisplay_2eproto}, {}};

static void InitDefaultsscc_info_RemoteDisplaySendResponse_remote_5fdisplay_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RemoteDisplaySendResponse_default_instance_;
    new (ptr) ::RemoteDisplaySendResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RemoteDisplaySendResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RemoteDisplaySendResponse_remote_5fdisplay_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RemoteDisplaySendResponse_remote_5fdisplay_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_remote_5fdisplay_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_remote_5fdisplay_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_remote_5fdisplay_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_remote_5fdisplay_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoteDisplayConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RemoteDisplayConfigRequest, type_),
  PROTOBUF_FIELD_OFFSET(::RemoteDisplayConfigRequest, width_),
  PROTOBUF_FIELD_OFFSET(::RemoteDisplayConfigRequest, height_),
  PROTOBUF_FIELD_OFFSET(::RemoteDisplayConfigRequest, display_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoteDisplayConfigResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RemoteDisplayConfigResponse, success_),
  PROTOBUF_FIELD_OFFSET(::RemoteDisplayConfigResponse, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoteDisplaySendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RemoteDisplaySendRequest, serial_),
  PROTOBUF_FIELD_OFFSET(::RemoteDisplaySendRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RemoteDisplaySendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RemoteDisplaySendResponse, serial_),
  PROTOBUF_FIELD_OFFSET(::RemoteDisplaySendResponse, success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RemoteDisplayConfigRequest)},
  { 9, -1, sizeof(::RemoteDisplayConfigResponse)},
  { 16, -1, sizeof(::RemoteDisplaySendRequest)},
  { 23, -1, sizeof(::RemoteDisplaySendResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RemoteDisplayConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RemoteDisplayConfigResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RemoteDisplaySendRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RemoteDisplaySendResponse_default_instance_),
};

const char descriptor_table_protodef_remote_5fdisplay_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024remote_display.proto\"r\n\032RemoteDisplayC"
  "onfigRequest\022$\n\004type\030\001 \001(\0162\026.RemoteDispl"
  "ayDataType\022\r\n\005width\030\002 \001(\005\022\016\n\006height\030\003 \001("
  "\005\022\017\n\007display\030\004 \001(\010\"<\n\033RemoteDisplayConfi"
  "gResponse\022\017\n\007success\030\001 \001(\010\022\014\n\004port\030\002 \001(\005"
  "\"8\n\030RemoteDisplaySendRequest\022\016\n\006serial\030\001"
  " \001(\003\022\014\n\004data\030\002 \001(\014\"<\n\031RemoteDisplaySendR"
  "esponse\022\016\n\006serial\030\001 \001(\003\022\017\n\007success\030\002 \001(\010"
  "*:\n\025RemoteDisplayDataType\022\007\n\003BMP\020\000\022\016\n\nMo"
  "tionJPEG\020\001\022\010\n\004H264\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_remote_5fdisplay_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_remote_5fdisplay_2eproto_sccs[4] = {
  &scc_info_RemoteDisplayConfigRequest_remote_5fdisplay_2eproto.base,
  &scc_info_RemoteDisplayConfigResponse_remote_5fdisplay_2eproto.base,
  &scc_info_RemoteDisplaySendRequest_remote_5fdisplay_2eproto.base,
  &scc_info_RemoteDisplaySendResponse_remote_5fdisplay_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_remote_5fdisplay_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_remote_5fdisplay_2eproto = {
  false, false, descriptor_table_protodef_remote_5fdisplay_2eproto, "remote_display.proto", 388,
  &descriptor_table_remote_5fdisplay_2eproto_once, descriptor_table_remote_5fdisplay_2eproto_sccs, descriptor_table_remote_5fdisplay_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_remote_5fdisplay_2eproto::offsets,
  file_level_metadata_remote_5fdisplay_2eproto, 4, file_level_enum_descriptors_remote_5fdisplay_2eproto, file_level_service_descriptors_remote_5fdisplay_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_remote_5fdisplay_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_remote_5fdisplay_2eproto)), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RemoteDisplayDataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_remote_5fdisplay_2eproto);
  return file_level_enum_descriptors_remote_5fdisplay_2eproto[0];
}
bool RemoteDisplayDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RemoteDisplayConfigRequest::InitAsDefaultInstance() {
}
class RemoteDisplayConfigRequest::_Internal {
 public:
};

RemoteDisplayConfigRequest::RemoteDisplayConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RemoteDisplayConfigRequest)
}
RemoteDisplayConfigRequest::RemoteDisplayConfigRequest(const RemoteDisplayConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&display_) -
    reinterpret_cast<char*>(&type_)) + sizeof(display_));
  // @@protoc_insertion_point(copy_constructor:RemoteDisplayConfigRequest)
}

void RemoteDisplayConfigRequest::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&display_) -
      reinterpret_cast<char*>(&type_)) + sizeof(display_));
}

RemoteDisplayConfigRequest::~RemoteDisplayConfigRequest() {
  // @@protoc_insertion_point(destructor:RemoteDisplayConfigRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteDisplayConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoteDisplayConfigRequest::ArenaDtor(void* object) {
  RemoteDisplayConfigRequest* _this = reinterpret_cast< RemoteDisplayConfigRequest* >(object);
  (void)_this;
}
void RemoteDisplayConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteDisplayConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteDisplayConfigRequest& RemoteDisplayConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteDisplayConfigRequest_remote_5fdisplay_2eproto.base);
  return *internal_default_instance();
}


void RemoteDisplayConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteDisplayConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&display_) -
      reinterpret_cast<char*>(&type_)) + sizeof(display_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteDisplayConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .RemoteDisplayDataType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::RemoteDisplayDataType>(val));
        } else goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool display = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          display_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteDisplayConfigRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteDisplayConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .RemoteDisplayDataType type = 1;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_height(), target);
  }

  // bool display = 4;
  if (this->display() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_display(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteDisplayConfigRequest)
  return target;
}

size_t RemoteDisplayConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteDisplayConfigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .RemoteDisplayDataType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_width());
  }

  // int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_height());
  }

  // bool display = 4;
  if (this->display() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteDisplayConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoteDisplayConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteDisplayConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteDisplayConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoteDisplayConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoteDisplayConfigRequest)
    MergeFrom(*source);
  }
}

void RemoteDisplayConfigRequest::MergeFrom(const RemoteDisplayConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoteDisplayConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from.height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from.display() != 0) {
    _internal_set_display(from._internal_display());
  }
}

void RemoteDisplayConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoteDisplayConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteDisplayConfigRequest::CopyFrom(const RemoteDisplayConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteDisplayConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteDisplayConfigRequest::IsInitialized() const {
  return true;
}

void RemoteDisplayConfigRequest::InternalSwap(RemoteDisplayConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteDisplayConfigRequest, display_)
      + sizeof(RemoteDisplayConfigRequest::display_)
      - PROTOBUF_FIELD_OFFSET(RemoteDisplayConfigRequest, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteDisplayConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteDisplayConfigResponse::InitAsDefaultInstance() {
}
class RemoteDisplayConfigResponse::_Internal {
 public:
};

RemoteDisplayConfigResponse::RemoteDisplayConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RemoteDisplayConfigResponse)
}
RemoteDisplayConfigResponse::RemoteDisplayConfigResponse(const RemoteDisplayConfigResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&success_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:RemoteDisplayConfigResponse)
}

void RemoteDisplayConfigResponse::SharedCtor() {
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&success_)) + sizeof(port_));
}

RemoteDisplayConfigResponse::~RemoteDisplayConfigResponse() {
  // @@protoc_insertion_point(destructor:RemoteDisplayConfigResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteDisplayConfigResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoteDisplayConfigResponse::ArenaDtor(void* object) {
  RemoteDisplayConfigResponse* _this = reinterpret_cast< RemoteDisplayConfigResponse* >(object);
  (void)_this;
}
void RemoteDisplayConfigResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteDisplayConfigResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteDisplayConfigResponse& RemoteDisplayConfigResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteDisplayConfigResponse_remote_5fdisplay_2eproto.base);
  return *internal_default_instance();
}


void RemoteDisplayConfigResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteDisplayConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&success_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteDisplayConfigResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteDisplayConfigResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteDisplayConfigResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // int32 port = 2;
  if (this->port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteDisplayConfigResponse)
  return target;
}

size_t RemoteDisplayConfigResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteDisplayConfigResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // int32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteDisplayConfigResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoteDisplayConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteDisplayConfigResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteDisplayConfigResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoteDisplayConfigResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoteDisplayConfigResponse)
    MergeFrom(*source);
  }
}

void RemoteDisplayConfigResponse::MergeFrom(const RemoteDisplayConfigResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoteDisplayConfigResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  if (from.port() != 0) {
    _internal_set_port(from._internal_port());
  }
}

void RemoteDisplayConfigResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoteDisplayConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteDisplayConfigResponse::CopyFrom(const RemoteDisplayConfigResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteDisplayConfigResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteDisplayConfigResponse::IsInitialized() const {
  return true;
}

void RemoteDisplayConfigResponse::InternalSwap(RemoteDisplayConfigResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteDisplayConfigResponse, port_)
      + sizeof(RemoteDisplayConfigResponse::port_)
      - PROTOBUF_FIELD_OFFSET(RemoteDisplayConfigResponse, success_)>(
          reinterpret_cast<char*>(&success_),
          reinterpret_cast<char*>(&other->success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteDisplayConfigResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteDisplaySendRequest::InitAsDefaultInstance() {
}
class RemoteDisplaySendRequest::_Internal {
 public:
};

RemoteDisplaySendRequest::RemoteDisplaySendRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RemoteDisplaySendRequest)
}
RemoteDisplaySendRequest::RemoteDisplaySendRequest(const RemoteDisplaySendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  serial_ = from.serial_;
  // @@protoc_insertion_point(copy_constructor:RemoteDisplaySendRequest)
}

void RemoteDisplaySendRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RemoteDisplaySendRequest_remote_5fdisplay_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_ = PROTOBUF_LONGLONG(0);
}

RemoteDisplaySendRequest::~RemoteDisplaySendRequest() {
  // @@protoc_insertion_point(destructor:RemoteDisplaySendRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteDisplaySendRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RemoteDisplaySendRequest::ArenaDtor(void* object) {
  RemoteDisplaySendRequest* _this = reinterpret_cast< RemoteDisplaySendRequest* >(object);
  (void)_this;
}
void RemoteDisplaySendRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteDisplaySendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteDisplaySendRequest& RemoteDisplaySendRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteDisplaySendRequest_remote_5fdisplay_2eproto.base);
  return *internal_default_instance();
}


void RemoteDisplaySendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteDisplaySendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  serial_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteDisplaySendRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteDisplaySendRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteDisplaySendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 serial = 1;
  if (this->serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_serial(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteDisplaySendRequest)
  return target;
}

size_t RemoteDisplaySendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteDisplaySendRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int64 serial = 1;
  if (this->serial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_serial());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteDisplaySendRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoteDisplaySendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteDisplaySendRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteDisplaySendRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoteDisplaySendRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoteDisplaySendRequest)
    MergeFrom(*source);
  }
}

void RemoteDisplaySendRequest::MergeFrom(const RemoteDisplaySendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoteDisplaySendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.serial() != 0) {
    _internal_set_serial(from._internal_serial());
  }
}

void RemoteDisplaySendRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoteDisplaySendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteDisplaySendRequest::CopyFrom(const RemoteDisplaySendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteDisplaySendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteDisplaySendRequest::IsInitialized() const {
  return true;
}

void RemoteDisplaySendRequest::InternalSwap(RemoteDisplaySendRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(serial_, other->serial_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteDisplaySendRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RemoteDisplaySendResponse::InitAsDefaultInstance() {
}
class RemoteDisplaySendResponse::_Internal {
 public:
};

RemoteDisplaySendResponse::RemoteDisplaySendResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:RemoteDisplaySendResponse)
}
RemoteDisplaySendResponse::RemoteDisplaySendResponse(const RemoteDisplaySendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&serial_, &from.serial_,
    static_cast<size_t>(reinterpret_cast<char*>(&success_) -
    reinterpret_cast<char*>(&serial_)) + sizeof(success_));
  // @@protoc_insertion_point(copy_constructor:RemoteDisplaySendResponse)
}

void RemoteDisplaySendResponse::SharedCtor() {
  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(success_));
}

RemoteDisplaySendResponse::~RemoteDisplaySendResponse() {
  // @@protoc_insertion_point(destructor:RemoteDisplaySendResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RemoteDisplaySendResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RemoteDisplaySendResponse::ArenaDtor(void* object) {
  RemoteDisplaySendResponse* _this = reinterpret_cast< RemoteDisplaySendResponse* >(object);
  (void)_this;
}
void RemoteDisplaySendResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RemoteDisplaySendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RemoteDisplaySendResponse& RemoteDisplaySendResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RemoteDisplaySendResponse_remote_5fdisplay_2eproto.base);
  return *internal_default_instance();
}


void RemoteDisplaySendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:RemoteDisplaySendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&serial_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&success_) -
      reinterpret_cast<char*>(&serial_)) + sizeof(success_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteDisplaySendResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 serial = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RemoteDisplaySendResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RemoteDisplaySendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 serial = 1;
  if (this->serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_serial(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RemoteDisplaySendResponse)
  return target;
}

size_t RemoteDisplaySendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RemoteDisplaySendResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 serial = 1;
  if (this->serial() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_serial());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteDisplaySendResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RemoteDisplaySendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RemoteDisplaySendResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RemoteDisplaySendResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RemoteDisplaySendResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RemoteDisplaySendResponse)
    MergeFrom(*source);
  }
}

void RemoteDisplaySendResponse::MergeFrom(const RemoteDisplaySendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RemoteDisplaySendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.serial() != 0) {
    _internal_set_serial(from._internal_serial());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
}

void RemoteDisplaySendResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RemoteDisplaySendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoteDisplaySendResponse::CopyFrom(const RemoteDisplaySendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RemoteDisplaySendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteDisplaySendResponse::IsInitialized() const {
  return true;
}

void RemoteDisplaySendResponse::InternalSwap(RemoteDisplaySendResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteDisplaySendResponse, success_)
      + sizeof(RemoteDisplaySendResponse::success_)
      - PROTOBUF_FIELD_OFFSET(RemoteDisplaySendResponse, serial_)>(
          reinterpret_cast<char*>(&serial_),
          reinterpret_cast<char*>(&other->serial_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteDisplaySendResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RemoteDisplayConfigRequest* Arena::CreateMaybeMessage< ::RemoteDisplayConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoteDisplayConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoteDisplayConfigResponse* Arena::CreateMaybeMessage< ::RemoteDisplayConfigResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoteDisplayConfigResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoteDisplaySendRequest* Arena::CreateMaybeMessage< ::RemoteDisplaySendRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoteDisplaySendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::RemoteDisplaySendResponse* Arena::CreateMaybeMessage< ::RemoteDisplaySendResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::RemoteDisplaySendResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
