#include "MainWindow.h"

#include <QPushButton>
#include <QDebug>

#include "NewDeviceDialog.h"

DTK_USE_NAMESPACE

#define DDE_PROTO_VER 13

static const QString DDE_COOPERATION_DBUS_SERVICE = "com.deepin.Cooperation";
static const QString DDE_COOPERATION_DBUS_PATH = "/com/deepin/Cooperation";
static const QString DDE_COOPERATION_DBUS_INTERFACE = "com.deepin.Cooperation";

MainWindow::MainWindow(QWidget *parent)
    : DMainWindow(parent)
    , m_cooperationBus(DDE_COOPERATION_DBUS_SERVICE,
                       DDE_COOPERATION_DBUS_PATH,
                       "com.deepin.Cooperation",
                       QDBusConnection::sessionBus()) {
    // setFixedSize(300, 300);

    QPushButton *newDeviceButton = new QPushButton("连接设备", this);
    setCentralWidget(newDeviceButton);

    connect(newDeviceButton, &QPushButton::clicked, this, &MainWindow::onNewDeviceButtonClicked);

    QDBusConnection::systemBus().connect(
        DDE_COOPERATION_DBUS_SERVICE,
        DDE_COOPERATION_DBUS_PATH,
        "org.freedesktop.DBus.Properties",
        "PropertiesChanged",
        QStringList{DDE_COOPERATION_DBUS_INTERFACE},
        QString(),
        this,
        SLOT(onCooperationPropertiesChanged(QString, QVariantMap, QStringList)));
}

MainWindow::~MainWindow() {
}

void MainWindow::onNewDeviceButtonClicked() {
    NewDeviceDialog *dialog = new NewDeviceDialog("", DDE_PROTO_VER, this);
    dialog->exec();
}

void MainWindow::onCooperationPropertiesChanged(
    const QString &interface,
    const QVariantMap &changedProperties,
    [[maybe_unused]] const QStringList &invalidatedProperties) {
    if (interface != DDE_COOPERATION_DBUS_INTERFACE) {
        return;
    }

    if (changedProperties.contains("Machines")) {
        const auto machinesPath = changedProperties["Machines"].toStringList();
    }
}

void MainWindow::handleMachinesChanged(const QStringList &machinesPath) {
    qDebug() << "new machines:" << machinesPath;

    QStringList added;
    for (const auto &path : machinesPath) {
        if (!m_machinesPath.contains(path)) {
            added.append(path);
        }
    }

    QStringList removed;
    for (const auto &path : m_machinesPath) {
        if (!machinesPath.contains(path)) {
            removed.append(path);
        }
    }

    m_machinesPath = machinesPath;
}
